/*********************************************************************************************************************
* RT1064DVL6A Opensourec Library 即（RT1064DVL6A 开源库）是一个基于官方 SDK 接口的第三方开源库
* Copyright (c) 2022 SEEKFREE 逐飞科技
* 
* 本文件是 RT1064DVL6A 开源库的一部分
* 
* RT1064DVL6A 开源库 是免费软件
* 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
* 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
* 
* 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
* 甚至没有隐含的适销性或适合特定用途的保证
* 更多细节请参见 GPL
* 
* 您应该在收到本开源库的同时收到一份 GPL 的副本
* 如果没有，请参阅<https://www.gnu.org/licenses/>
* 
* 额外注明：
* 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
* 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
* 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
* 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
* 
* 文件名称          zf_driver_uart
* 公司名称          成都逐飞科技有限公司
* 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
* 开发环境          IAR 8.32.4 or MDK 5.33
* 适用平台          RT1064DVL6A
* 店铺链接          https://seekfree.taobao.com/
* 
* 修改记录
* 日期              作者                备注
* 2022-09-21        SeekFree            first version
********************************************************************************************************************/

#ifndef _zf_driver_uart_h_
#define _zf_driver_uart_h_

#include "zf_common_typedef.h"
#include "fsl_lpuart.h"

typedef enum                                                                    // 枚举串口引脚 此枚举定义不允许用户修改
{
    // UART 1 TX 引脚
    UART1_TX_B12 = 16 * 1,

    // UART 2 TX 引脚
    UART2_TX_B18 = 16 * 2,

    // UART 3 TX 引脚
    UART3_TX_B22 = 16 * 3,  UART3_TX_C8,

    // UART 4 TX 引脚
    UART4_TX_C16 = 16 * 4,  UART4_TX_D0,

    // UART 5 TX 引脚
    UART5_TX_C28 = 16 * 5,

    // UART 6 TX 引脚
    UART6_TX_B2  = 16 * 6,

    // UART 7 TX 引脚
    // 无引脚可用

    // UART 8 TX 引脚
    UART8_TX_B26 = 16 * 8,  UART8_TX_D16,
    
}uart_tx_pin_enum;

typedef enum                                                                    // 枚举串口引脚 此枚举定义不允许用户修改
{
    // UART 1 RX 引脚
    UART1_RX_B13 = 16 * 1, 
                
    // UART 2 RX 引脚 
    UART2_RX_B19 = 16 * 2,
                
    // UART 3 RX 引脚 
    UART3_RX_B23 = 16 * 3,  UART3_RX_C9,
                
    // UART 4 RX 引脚 
    UART4_RX_C17 = 16 * 4,  UART4_RX_D1,
                
    // UART 5 RX 引脚 
    UART5_RX_C29 = 16 * 5,
                
    // UART 6 RX 引脚 
    UART6_RX_B3  = 16 * 6,
                
    // UART 7 RX 引脚 
    // 无引脚可用
                
    // UART 8 RX 引脚 
    UART8_RX_B27 = 16 * 8,  UART8_RX_D17,
}uart_rx_pin_enum;

typedef enum                                                                    // 枚举串口号 此枚举定义不允许用户修改
{
    UART_1 = 1,
    UART_2,
    UART_3,
    UART_4,
    UART_5,
    UART_6,
    UART_8 = 8,
}uart_index_enum;


void    uart_write_byte                     (uart_index_enum uartn, const uint8 dat);
void    uart_write_buffer                   (uart_index_enum uartn, const uint8 *buff, uint32 len);
void    uart_write_string                   (uart_index_enum uartn, const char *str);

uint8   uart_read_byte                      (uart_index_enum uartn);
uint8   uart_query_byte                     (uart_index_enum uartn, uint8 *dat);

void    uart_tx_interrupt                   (uart_index_enum uartn, uint32 status);
void    uart_rx_interrupt                   (uart_index_enum uartn, uint32 status);

void    uart_init                           (uart_index_enum uartn, uint32 baud, uart_tx_pin_enum tx_pin, uart_rx_pin_enum rx_pin);

#ifdef COMPATIBLE_WITH_OLDER_VERSIONS                                           // 兼容旧版本开源库接口名称
#define uart_putchar(uart_n, dat)           (uart_write_byte((uart_n), (dat)))
#define uart_putbuff(uart_n, buff, len)     (uart_write_buffer((uart_n), (buff), (len)))
#define uart_putstr(uart_n, str)            (uart_write_string((uart_n), (str)))

#define uart_getchar(uart_n, dat)           (*(dat) = uart_read_byte((uart_n)))
#define uart_query(uart_n, dat)             (uart_query_byte((uart_n), (dat)))

#define uart_tx_irq(uart_n, status)         (uart_tx_interrupt((uart_n), (status)))
#define uart_rx_irq(uart_n, status)         (uart_rx_interrupt((uart_n), (status)))
#endif

#endif
