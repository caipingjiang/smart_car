<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mcx_vision_board.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mcx_vision_board.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Aug 20 16:36:43 2024
<BR><P>
<H3>Maximum Stack Usage =       1968 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1]">Reset_Handler</a>
 <LI><a href="#[d7]">ADC0_DriverIRQHandler</a>
 <LI><a href="#[d8]">ADC1_DriverIRQHandler</a>
 <LI><a href="#[12f]">BSP32_DriverIRQHandler</a>
 <LI><a href="#[5]">BusFault_Handler</a>
 <LI><a href="#[e8]">CAN0_DriverIRQHandler</a>
 <LI><a href="#[e9]">CAN1_DriverIRQHandler</a>
 <LI><a href="#[107]">CDOG0_DriverIRQHandler</a>
 <LI><a href="#[108]">CDOG1_DriverIRQHandler</a>
 <LI><a href="#[144]">CMC0_DriverIRQHandler</a>
 <LI><a href="#[145]">CTI0_DriverIRQHandler</a>
 <LI><a href="#[114]">DAC0_DriverIRQHandler</a>
 <LI><a href="#[115]">DAC1_DriverIRQHandler</a>
 <LI><a href="#[116]">DAC2_DriverIRQHandler</a>
 <LI><a href="#[9]">DebugMon_Handler</a>
 <LI><a href="#[0]">DefaultISR</a>
 <LI><a href="#[f3]">ELS_DriverIRQHandler</a>
 <LI><a href="#[130]">ELS_ERR_DriverIRQHandler</a>
 <LI><a href="#[111]">EMVSIM0_DriverIRQHandler</a>
 <LI><a href="#[112]">EMVSIM1_DriverIRQHandler</a>
 <LI><a href="#[126]">ENC0_COMPARE_DriverIRQHandler</a>
 <LI><a href="#[127]">ENC0_HOME_DriverIRQHandler</a>
 <LI><a href="#[129]">ENC0_IDX_DriverIRQHandler</a>
 <LI><a href="#[128]">ENC0_WDG_SAB_DriverIRQHandler</a>
 <LI><a href="#[12a]">ENC1_COMPARE_DriverIRQHandler</a>
 <LI><a href="#[12b]">ENC1_HOME_DriverIRQHandler</a>
 <LI><a href="#[12d]">ENC1_IDX_DriverIRQHandler</a>
 <LI><a href="#[12c]">ENC1_WDG_SAB_DriverIRQHandler</a>
 <LI><a href="#[133]">ERM_MULTI_BIT_ERROR_DriverIRQHandler</a>
 <LI><a href="#[132]">ERM_SINGLE_BIT_ERROR_DriverIRQHandler</a>
 <LI><a href="#[13f]">ETB0_DriverIRQHandler</a>
 <LI><a href="#[135]">ETHERNET_DriverIRQHandler</a>
 <LI><a href="#[137]">ETHERNET_MACLP_DriverIRQHandler</a>
 <LI><a href="#[136]">ETHERNET_PMT_DriverIRQHandler</a>
 <LI><a href="#[10e]">EWM0_DriverIRQHandler</a>
 <LI><a href="#[11b]">FLEXPWM0_FAULT_DriverIRQHandler</a>
 <LI><a href="#[11a]">FLEXPWM0_RELOAD_ERROR_DriverIRQHandler</a>
 <LI><a href="#[11c]">FLEXPWM0_SUBMODULE0_DriverIRQHandler</a>
 <LI><a href="#[11d]">FLEXPWM0_SUBMODULE1_DriverIRQHandler</a>
 <LI><a href="#[11e]">FLEXPWM0_SUBMODULE2_DriverIRQHandler</a>
 <LI><a href="#[11f]">FLEXPWM0_SUBMODULE3_DriverIRQHandler</a>
 <LI><a href="#[121]">FLEXPWM1_FAULT_DriverIRQHandler</a>
 <LI><a href="#[120]">FLEXPWM1_RELOAD_ERROR_DriverIRQHandler</a>
 <LI><a href="#[122]">FLEXPWM1_SUBMODULE0_DriverIRQHandler</a>
 <LI><a href="#[123]">FLEXPWM1_SUBMODULE1_DriverIRQHandler</a>
 <LI><a href="#[124]">FLEXPWM1_SUBMODULE2_DriverIRQHandler</a>
 <LI><a href="#[125]">FLEXPWM1_SUBMODULE3_DriverIRQHandler</a>
 <LI><a href="#[e4]">FLEXSPI0_DriverIRQHandler</a>
 <LI><a href="#[134]">FMU0_DriverIRQHandler</a>
 <LI><a href="#[f1]">Freqme_DriverIRQHandler</a>
 <LI><a href="#[10c]">GDET_DriverIRQHandler</a>
 <LI><a href="#[bb]">GPIO00_DriverIRQHandler</a>
 <LI><a href="#[bc]">GPIO01_DriverIRQHandler</a>
 <LI><a href="#[bd]">GPIO10_DriverIRQHandler</a>
 <LI><a href="#[be]">GPIO11_DriverIRQHandler</a>
 <LI><a href="#[bf]">GPIO20_DriverIRQHandler</a>
 <LI><a href="#[c0]">GPIO21_DriverIRQHandler</a>
 <LI><a href="#[c1]">GPIO30_DriverIRQHandler</a>
 <LI><a href="#[c2]">GPIO31_DriverIRQHandler</a>
 <LI><a href="#[c3]">GPIO40_DriverIRQHandler</a>
 <LI><a href="#[c4]">GPIO41_DriverIRQHandler</a>
 <LI><a href="#[c5]">GPIO50_DriverIRQHandler</a>
 <LI><a href="#[c6]">GPIO51_DriverIRQHandler</a>
 <LI><a href="#[117]">HSCMP0_DriverIRQHandler</a>
 <LI><a href="#[118]">HSCMP1_DriverIRQHandler</a>
 <LI><a href="#[119]">HSCMP2_DriverIRQHandler</a>
 <LI><a href="#[109]">I3C0_DriverIRQHandler</a>
 <LI><a href="#[10a]">I3C1_DriverIRQHandler</a>
 <LI><a href="#[12e]">ITRC0_DriverIRQHandler</a>
 <LI><a href="#[139]">LPTMR0_DriverIRQHandler</a>
 <LI><a href="#[13a]">LPTMR1_DriverIRQHandler</a>
 <LI><a href="#[e0]">MAILBOX_DriverIRQHandler</a>
 <LI><a href="#[c8]">MRT0_DriverIRQHandler</a>
 <LI><a href="#[4]">MemManage_Handler</a>
 <LI><a href="#[10b]">NPU_DriverIRQHandler</a>
 <LI><a href="#[aa]">OR_DriverIRQHandler</a>
 <LI><a href="#[e3]">OS_EVENT_DriverIRQHandler</a>
 <LI><a href="#[da]">PDM_EVENT_DriverIRQHandler</a>
 <LI><a href="#[d9]">PINT0_DriverIRQHandler</a>
 <LI><a href="#[f4]">PKC_DriverIRQHandler</a>
 <LI><a href="#[131]">PKC_ERR_DriverIRQHandler</a>
 <LI><a href="#[13e]">PORT_EFT_DriverIRQHandler</a>
 <LI><a href="#[f6]">PQ_DriverIRQHandler</a>
 <LI><a href="#[f5]">PUF_DriverIRQHandler</a>
 <LI><a href="#[de]">RTC_DriverIRQHandler</a>
 <LI><a href="#[db]">Reserved65_DriverIRQHandler</a>
 <LI><a href="#[ea]">Reserved80_DriverIRQHandler</a>
 <LI><a href="#[eb]">Reserved81_DriverIRQHandler</a>
 <LI><a href="#[ef]">Reserved85_DriverIRQHandler</a>
 <LI><a href="#[e5]">SAI0_DriverIRQHandler</a>
 <LI><a href="#[e6]">SAI1_DriverIRQHandler</a>
 <LI><a href="#[13b]">SCG_DriverIRQHandler</a>
 <LI><a href="#[cb]">SCT0_DriverIRQHandler</a>
 <LI><a href="#[ee]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a>
 <LI><a href="#[f2]">SEC_VIO_DriverIRQHandler</a>
 <LI><a href="#[138]">SINC_FILTER_DriverIRQHandler</a>
 <LI><a href="#[140]">SM3_DriverIRQHandler</a>
 <LI><a href="#[df]">SMARTDMA_DriverIRQHandler</a>
 <LI><a href="#[13c]">SPC_DriverIRQHandler</a>
 <LI><a href="#[7]">SecureFault_Handler</a>
 <LI><a href="#[141]">TRNG0_DriverIRQHandler</a>
 <LI><a href="#[10f]">TSI_END_OF_SCAN_DriverIRQHandler</a>
 <LI><a href="#[110]">TSI_OUT_OF_SCAN_DriverIRQHandler</a>
 <LI><a href="#[dd]">USB0_DCD_DriverIRQHandler</a>
 <LI><a href="#[dc]">USB0_FS_DriverIRQHandler</a>
 <LI><a href="#[ed]">USB1_HS_DriverIRQHandler</a>
 <LI><a href="#[ec]">USB1_HS_PHY_DriverIRQHandler</a>
 <LI><a href="#[c7]">UTICK0_DriverIRQHandler</a>
 <LI><a href="#[6]">UsageFault_Handler</a>
 <LI><a href="#[10d]">VBAT0_DriverIRQHandler</a>
 <LI><a href="#[13d]">WUU_DriverIRQHandler</a>
 <LI><a href="#[142]">WWDT0_DriverIRQHandler</a>
 <LI><a href="#[143]">WWDT1_DriverIRQHandler</a>
 <LI><a href="#[2]">NMI_Handler</a>
 <LI><a href="#[8]">SVC_Handler</a>
 <LI><a href="#[a]">PendSV_Handler</a>
 <LI><a href="#[b]">SysTick_Handler</a>
 <LI><a href="#[c]">OR_IRQHandler</a>
 <LI><a href="#[d]">EDMA_0_CH0_IRQHandler</a>
 <LI><a href="#[e]">EDMA_0_CH1_IRQHandler</a>
 <LI><a href="#[f]">EDMA_0_CH2_IRQHandler</a>
 <LI><a href="#[10]">EDMA_0_CH3_IRQHandler</a>
 <LI><a href="#[11]">EDMA_0_CH4_IRQHandler</a>
 <LI><a href="#[12]">EDMA_0_CH5_IRQHandler</a>
 <LI><a href="#[13]">EDMA_0_CH6_IRQHandler</a>
 <LI><a href="#[14]">EDMA_0_CH7_IRQHandler</a>
 <LI><a href="#[15]">EDMA_0_CH8_IRQHandler</a>
 <LI><a href="#[16]">EDMA_0_CH9_IRQHandler</a>
 <LI><a href="#[17]">EDMA_0_CH10_IRQHandler</a>
 <LI><a href="#[18]">EDMA_0_CH11_IRQHandler</a>
 <LI><a href="#[19]">EDMA_0_CH12_IRQHandler</a>
 <LI><a href="#[1a]">EDMA_0_CH13_IRQHandler</a>
 <LI><a href="#[1b]">EDMA_0_CH14_IRQHandler</a>
 <LI><a href="#[1c]">EDMA_0_CH15_IRQHandler</a>
 <LI><a href="#[29]">UTICK0_IRQHandler</a>
 <LI><a href="#[2a]">MRT0_IRQHandler</a>
 <LI><a href="#[2b]">CTIMER0_IRQHandler</a>
 <LI><a href="#[2c]">CTIMER1_IRQHandler</a>
 <LI><a href="#[2d]">SCT0_IRQHandler</a>
 <LI><a href="#[2e]">CTIMER2_IRQHandler</a>
 <LI><a href="#[2f]">LP_FLEXCOMM0_IRQHandler</a>
 <LI><a href="#[30]">LP_FLEXCOMM1_IRQHandler</a>
 <LI><a href="#[31]">LP_FLEXCOMM2_IRQHandler</a>
 <LI><a href="#[32]">LP_FLEXCOMM3_IRQHandler</a>
 <LI><a href="#[35]">LP_FLEXCOMM6_IRQHandler</a>
 <LI><a href="#[36]">LP_FLEXCOMM7_IRQHandler</a>
 <LI><a href="#[37]">LP_FLEXCOMM8_IRQHandler</a>
 <LI><a href="#[38]">LP_FLEXCOMM9_IRQHandler</a>
 <LI><a href="#[39]">ADC0_IRQHandler</a>
 <LI><a href="#[3a]">ADC1_IRQHandler</a>
 <LI><a href="#[3b]">PINT0_IRQHandler</a>
 <LI><a href="#[3c]">PDM_EVENT_IRQHandler</a>
 <LI><a href="#[3d]">Reserved65_IRQHandler</a>
 <LI><a href="#[3e]">USB0_FS_IRQHandler</a>
 <LI><a href="#[3f]">USB0_DCD_IRQHandler</a>
 <LI><a href="#[40]">RTC_IRQHandler</a>
 <LI><a href="#[42]">MAILBOX_IRQHandler</a>
 <LI><a href="#[43]">CTIMER3_IRQHandler</a>
 <LI><a href="#[44]">CTIMER4_IRQHandler</a>
 <LI><a href="#[45]">OS_EVENT_IRQHandler</a>
 <LI><a href="#[46]">FLEXSPI0_IRQHandler</a>
 <LI><a href="#[47]">SAI0_IRQHandler</a>
 <LI><a href="#[48]">SAI1_IRQHandler</a>
 <LI><a href="#[49]">USDHC0_IRQHandler</a>
 <LI><a href="#[4a]">CAN0_IRQHandler</a>
 <LI><a href="#[4b]">CAN1_IRQHandler</a>
 <LI><a href="#[4c]">Reserved80_IRQHandler</a>
 <LI><a href="#[4d]">Reserved81_IRQHandler</a>
 <LI><a href="#[4e]">USB1_HS_PHY_IRQHandler</a>
 <LI><a href="#[4f]">USB1_HS_IRQHandler</a>
 <LI><a href="#[50]">SEC_HYPERVISOR_CALL_IRQHandler</a>
 <LI><a href="#[51]">Reserved85_IRQHandler</a>
 <LI><a href="#[52]">PLU_IRQHandler</a>
 <LI><a href="#[53]">Freqme_IRQHandler</a>
 <LI><a href="#[54]">SEC_VIO_IRQHandler</a>
 <LI><a href="#[55]">ELS_IRQHandler</a>
 <LI><a href="#[56]">PKC_IRQHandler</a>
 <LI><a href="#[57]">PUF_IRQHandler</a>
 <LI><a href="#[58]">PQ_IRQHandler</a>
 <LI><a href="#[59]">EDMA_1_CH0_IRQHandler</a>
 <LI><a href="#[5a]">EDMA_1_CH1_IRQHandler</a>
 <LI><a href="#[5b]">EDMA_1_CH2_IRQHandler</a>
 <LI><a href="#[5c]">EDMA_1_CH3_IRQHandler</a>
 <LI><a href="#[5d]">EDMA_1_CH4_IRQHandler</a>
 <LI><a href="#[5e]">EDMA_1_CH5_IRQHandler</a>
 <LI><a href="#[5f]">EDMA_1_CH6_IRQHandler</a>
 <LI><a href="#[60]">EDMA_1_CH7_IRQHandler</a>
 <LI><a href="#[61]">EDMA_1_CH8_IRQHandler</a>
 <LI><a href="#[62]">EDMA_1_CH9_IRQHandler</a>
 <LI><a href="#[63]">EDMA_1_CH10_IRQHandler</a>
 <LI><a href="#[64]">EDMA_1_CH11_IRQHandler</a>
 <LI><a href="#[65]">EDMA_1_CH12_IRQHandler</a>
 <LI><a href="#[66]">EDMA_1_CH13_IRQHandler</a>
 <LI><a href="#[67]">EDMA_1_CH14_IRQHandler</a>
 <LI><a href="#[68]">EDMA_1_CH15_IRQHandler</a>
 <LI><a href="#[69]">CDOG0_IRQHandler</a>
 <LI><a href="#[6a]">CDOG1_IRQHandler</a>
 <LI><a href="#[6b]">I3C0_IRQHandler</a>
 <LI><a href="#[6c]">I3C1_IRQHandler</a>
 <LI><a href="#[6d]">NPU_IRQHandler</a>
 <LI><a href="#[6e]">GDET_IRQHandler</a>
 <LI><a href="#[6f]">VBAT0_IRQHandler</a>
 <LI><a href="#[70]">EWM0_IRQHandler</a>
 <LI><a href="#[71]">TSI_END_OF_SCAN_IRQHandler</a>
 <LI><a href="#[72]">TSI_OUT_OF_SCAN_IRQHandler</a>
 <LI><a href="#[73]">EMVSIM0_IRQHandler</a>
 <LI><a href="#[74]">EMVSIM1_IRQHandler</a>
 <LI><a href="#[75]">FLEXIO_IRQHandler</a>
 <LI><a href="#[76]">DAC0_IRQHandler</a>
 <LI><a href="#[77]">DAC1_IRQHandler</a>
 <LI><a href="#[78]">DAC2_IRQHandler</a>
 <LI><a href="#[79]">HSCMP0_IRQHandler</a>
 <LI><a href="#[7a]">HSCMP1_IRQHandler</a>
 <LI><a href="#[7b]">HSCMP2_IRQHandler</a>
 <LI><a href="#[7c]">FLEXPWM0_RELOAD_ERROR_IRQHandler</a>
 <LI><a href="#[7d]">FLEXPWM0_FAULT_IRQHandler</a>
 <LI><a href="#[7e]">FLEXPWM0_SUBMODULE0_IRQHandler</a>
 <LI><a href="#[7f]">FLEXPWM0_SUBMODULE1_IRQHandler</a>
 <LI><a href="#[80]">FLEXPWM0_SUBMODULE2_IRQHandler</a>
 <LI><a href="#[81]">FLEXPWM0_SUBMODULE3_IRQHandler</a>
 <LI><a href="#[82]">FLEXPWM1_RELOAD_ERROR_IRQHandler</a>
 <LI><a href="#[83]">FLEXPWM1_FAULT_IRQHandler</a>
 <LI><a href="#[84]">FLEXPWM1_SUBMODULE0_IRQHandler</a>
 <LI><a href="#[85]">FLEXPWM1_SUBMODULE1_IRQHandler</a>
 <LI><a href="#[86]">FLEXPWM1_SUBMODULE2_IRQHandler</a>
 <LI><a href="#[87]">FLEXPWM1_SUBMODULE3_IRQHandler</a>
 <LI><a href="#[88]">ENC0_COMPARE_IRQHandler</a>
 <LI><a href="#[89]">ENC0_HOME_IRQHandler</a>
 <LI><a href="#[8a]">ENC0_WDG_SAB_IRQHandler</a>
 <LI><a href="#[8b]">ENC0_IDX_IRQHandler</a>
 <LI><a href="#[8c]">ENC1_COMPARE_IRQHandler</a>
 <LI><a href="#[8d]">ENC1_HOME_IRQHandler</a>
 <LI><a href="#[8e]">ENC1_WDG_SAB_IRQHandler</a>
 <LI><a href="#[8f]">ENC1_IDX_IRQHandler</a>
 <LI><a href="#[90]">ITRC0_IRQHandler</a>
 <LI><a href="#[91]">BSP32_IRQHandler</a>
 <LI><a href="#[92]">ELS_ERR_IRQHandler</a>
 <LI><a href="#[93]">PKC_ERR_IRQHandler</a>
 <LI><a href="#[94]">ERM_SINGLE_BIT_ERROR_IRQHandler</a>
 <LI><a href="#[95]">ERM_MULTI_BIT_ERROR_IRQHandler</a>
 <LI><a href="#[96]">FMU0_IRQHandler</a>
 <LI><a href="#[97]">ETHERNET_IRQHandler</a>
 <LI><a href="#[98]">ETHERNET_PMT_IRQHandler</a>
 <LI><a href="#[99]">ETHERNET_MACLP_IRQHandler</a>
 <LI><a href="#[9a]">SINC_FILTER_IRQHandler</a>
 <LI><a href="#[9b]">LPTMR0_IRQHandler</a>
 <LI><a href="#[9c]">LPTMR1_IRQHandler</a>
 <LI><a href="#[9d]">SCG_IRQHandler</a>
 <LI><a href="#[9e]">SPC_IRQHandler</a>
 <LI><a href="#[9f]">WUU_IRQHandler</a>
 <LI><a href="#[a0]">PORT_EFT_IRQHandler</a>
 <LI><a href="#[a1]">ETB0_IRQHandler</a>
 <LI><a href="#[a2]">SM3_IRQHandler</a>
 <LI><a href="#[a3]">TRNG0_IRQHandler</a>
 <LI><a href="#[a4]">WWDT0_IRQHandler</a>
 <LI><a href="#[a5]">WWDT1_IRQHandler</a>
 <LI><a href="#[a6]">CMC0_IRQHandler</a>
 <LI><a href="#[a7]">CTI0_IRQHandler</a>
 <LI><a href="#[265]">Abs</a>
 <LI><a href="#[267]">Activation</a>
 <LI><a href="#[268]">Add</a>
 <LI><a href="#[275]">BatchMulAdd</a>
 <LI><a href="#[276]">BitTransformation</a>
 <LI><a href="#[27b]">CallKernel</a>
 <LI><a href="#[292]">CallKernelWrapper</a>
 <LI><a href="#[284]">CastInt16ToInt8</a>
 <LI><a href="#[285]">CastInt8ToInt16</a>
 <LI><a href="#[28e]">Conv1DStandard</a>
 <LI><a href="#[28a]">Conv2DAtrous</a>
 <LI><a href="#[281]">Conv2DDepthwiseNeutron16x16Kernel3x3</a>
 <LI><a href="#[280]">Conv2DDepthwiseV1</a>
 <LI><a href="#[291]">Conv2DDepthwiseV2</a>
 <LI><a href="#[27f]">Conv2DPointwise</a>
 <LI><a href="#[27c]">Conv2DStandardV1</a>
 <LI><a href="#[282]">Conv2DStandardV2</a>
 <LI><a href="#[283]">Conv2DStandardV3</a>
 <LI><a href="#[296]">DebugLog</a>
 <LI><a href="#[266]">EXEC</a>
 <LI><a href="#[28d]">FullyConnected</a>
 <LI><a href="#[2ac]">GetKernelArgSz</a>
 <LI><a href="#[2ab]">GetKernelArgSzWrapper</a>
 <LI><a href="#[406]">GetMaxArgSz</a>
 <LI><a href="#[27d]">GlobalAvgPool</a>
 <LI><a href="#[286]">GlobalMaxPool</a>
 <LI><a href="#[297]">InvokeDebugLogCallback</a>
 <LI><a href="#[27e]">MaxPool</a>
 <LI><a href="#[288]">MemCpy</a>
 <LI><a href="#[28f]">MirrorPad</a>
 <LI><a href="#[28b]">MulInt16</a>
 <LI><a href="#[3f9]">NeutronFirmwareTraceInit</a>
 <LI><a href="#[2da]">NeutronMicroInstrPost</a>
 <LI><a href="#[2dc]">NeutronMicroInstrPre</a>
 <LI><a href="#[28c]">Pad</a>
 <LI><a href="#[287]">Sequence</a>
 <LI><a href="#[289]">Slice</a>
 <LI><a href="#[2e3]">TfLiteIntArrayEqual</a>
 <LI><a href="#[3ba]">TfLiteIntArrayGetSizeInBytes</a>
 <LI><a href="#[326]">TfLiteTypeGetName</a>
 <LI><a href="#[290]">Upsample2DV1</a>
 <LI><a href="#[2e5]">MicroPrintf(char const*, ...)</a>
 <LI><a href="#[2e6]">VMicroPrintf(char const*, std::__va_list)</a>
 <LI><a href="#[301]">AbortImpl()</a>
 <LI><a href="#[302]">flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)</a>
 <LI><a href="#[15c]">tflite::PadPrepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[14e]">tflite::ParseSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[159]">tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[36c]">tflite::AlignSizeUp(unsigned int, unsigned int)</a>
 <LI><a href="#[151]">tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[3a0]">tflite::ElementCount(TfLiteIntArray const&)</a>
 <LI><a href="#[312]">tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)</a>
 <LI><a href="#[313]">tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)</a>
 <LI><a href="#[155]">tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[2f1]">tflite::Register_ADD()</a>
 <LI><a href="#[2e8]">tflite::Register_PAD()</a>
 <LI><a href="#[3b5]">tflite::tensor_utils::UnpackDenseInt4IntoInt8(signed char const*, int, signed char*)</a>
 <LI><a href="#[38d]">tflite::ErrorReporter::Report(char const*, ...)</a>
 <LI><a href="#[14f]">tflite::ParseQuantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[337]">tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)</a>
 <LI><a href="#[356]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;float&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, float, float, float const*, float const*, float*)</a>
 <LI><a href="#[357]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;long&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, long, long, long const*, long const*, long*)</a>
 <LI><a href="#[33d]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;short&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, short const*, short const*, short*)</a>
 <LI><a href="#[398]">tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</a>
 <LI><a href="#[351]">void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)</a>
 <LI><a href="#[34f]">void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)</a>
 <LI><a href="#[350]">void tflite::reference_ops::PadImpl&lang;long, long&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, long const*, long const*, tflite::RuntimeShape const&, long*)</a>
 <LI><a href="#[34e]">void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)</a>
 <LI><a href="#[36e]">tflite::AlignPointerUp(unsigned char*, unsigned int)</a>
 <LI><a href="#[171]">tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[173]">tflite::DequantizeInit(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[384]">tflite::GetBuiltinCode(tflite::OperatorCode const*)</a>
 <LI><a href="#[314]">tflite::GetTensorShape(TfLiteTensor const*)</a>
 <LI><a href="#[315]">tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)</a>
 <LI><a href="#[198]">tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*)</a>
 <LI><a href="#[18f]">tflite::MicroAllocator::AllocateTempBuffer(unsigned int, unsigned int)</a>
 <LI><a href="#[190]">tflite::MicroAllocator::DeallocateTempBuffer(unsigned char*)</a>
 <LI><a href="#[192]">tflite::MicroAllocator::IsAllTempDeallocated()</a>
 <LI><a href="#[191]">tflite::MicroAllocator::ResetTempAllocations()</a>
 <LI><a href="#[363]">tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)</a>
 <LI><a href="#[366]">tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)</a>
 <LI><a href="#[364]">tflite::MicroAllocator::InitScratchBufferData()</a>
 <LI><a href="#[19b]">tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)</a>
 <LI><a href="#[382]">tflite::MicroAllocator::GetBuiltinDataAllocator()</a>
 <LI><a href="#[193]">tflite::MicroAllocator::AllocatePersistentBuffer(unsigned int)</a>
 <LI><a href="#[18d]">tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a>
 <LI><a href="#[36a]">tflite::MicroAllocator::GetScratchBufferRequests()</a>
 <LI><a href="#[197]">tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)</a>
 <LI><a href="#[18e]">tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)</a>
 <LI><a href="#[370]">tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)</a>
 <LI><a href="#[196]">tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)</a>
 <LI><a href="#[19c]">tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)</a>
 <LI><a href="#[372]">tflite::MicroAllocator::FinishPrepareNodeAllocations(int)</a>
 <LI><a href="#[18c]">tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a>
 <LI><a href="#[19a]">tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)</a>
 <LI><a href="#[199]">tflite::MicroAllocator::AllocatePersistentTfLiteTensorInternal()</a>
 <LI><a href="#[377]">tflite::MicroAllocator::Create(tflite::SingleArenaBufferAllocator*, tflite::MicroMemoryPlanner*)</a>
 <LI><a href="#[374]">tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)</a>
 <LI><a href="#[195]">tflite::MicroAllocator::~MicroAllocator__deallocating()</a>
 <LI><a href="#[194]">tflite::MicroAllocator::~MicroAllocator()</a>
 <LI><a href="#[48c]">tflite::MicroAllocator::~MicroAllocator__sub_object()</a>
 <LI><a href="#[323]">tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[2eb]">tflite::Register_SLICE()</a>
 <LI><a href="#[34a]">tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)</a>
 <LI><a href="#[156]">tflite::ParseDequantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[3ac]">tflite::AlignPointerDown(unsigned char*, unsigned int)</a>
 <LI><a href="#[2d3]">tflite::MicroInterpreter::AllocateTensors()</a>
 <LI><a href="#[37c]">tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()</a>
 <LI><a href="#[388]">tflite::MicroInterpreter::Init(tflite::MicroProfilerInterface*)</a>
 <LI><a href="#[381]">tflite::MicroInterpreter::Reset()</a>
 <LI><a href="#[2cc]">tflite::MicroInterpreter::input(unsigned int)</a>
 <LI><a href="#[2d8]">tflite::MicroInterpreter::Invoke()</a>
 <LI><a href="#[2cf]">tflite::MicroInterpreter::output(unsigned int)</a>
 <LI><a href="#[2d5]">tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)</a>
 <LI><a href="#[48d]">tflite::MicroInterpreter::MicroInterpreter__sub_object(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)</a>
 <LI><a href="#[14a]">tflite::MicroInterpreter::~MicroInterpreter()</a>
 <LI><a href="#[48e]">tflite::MicroInterpreter::~MicroInterpreter__sub_object()</a>
 <LI><a href="#[2ee]">tflite::Register_CONV_2D()</a>
 <LI><a href="#[2f2]">tflite::Register_SOFTMAX()</a>
 <LI><a href="#[3a6]">tflite::TfLiteTypeSizeOf(TfLiteType, unsigned int*)</a>
 <LI><a href="#[38b]">tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)</a>
 <LI><a href="#[31f]">tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)</a>
 <LI><a href="#[172]">tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[2ec]">tflite::Register_QUANTIZE()</a>
 <LI><a href="#[19f]">tflite::MicroErrorReporter::Report(char const*, std::__va_list)</a>
 <LI><a href="#[19e]">tflite::MicroErrorReporter::~MicroErrorReporter__deallocating()</a>
 <LI><a href="#[19d]">tflite::MicroErrorReporter::~MicroErrorReporter()</a>
 <LI><a href="#[48f]">tflite::MicroErrorReporter::~MicroErrorReporter__sub_object()</a>
 <LI><a href="#[1b3]">tflite::MicroMemoryPlanner::PrintMemoryPlan()</a>
 <LI><a href="#[1b1]">tflite::MicroMemoryPlanner::Init(unsigned char*, int)</a>
 <LI><a href="#[1ad]">tflite::MicroMemoryPlanner::AddBuffer(int, int, int, int)</a>
 <LI><a href="#[14d]">tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[38e]">tflite::QuantizeMultiplier(double, long*, int*)</a>
 <LI><a href="#[395]">tflite::ReverseSortInPlace(int*, int*, int)</a>
 <LI><a href="#[35a]">tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)</a>
 <LI><a href="#[34b]">tflite::ConvParamsQuantized(TfLiteConvParams const&, tflite::OpDataConv const&)</a>
 <LI><a href="#[1a5]">tflite::GreedyMemoryPlanner::GetBufferCount()</a>
 <LI><a href="#[1a9]">tflite::GreedyMemoryPlanner::PrintMemoryPlan()</a>
 <LI><a href="#[1a6]">tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)</a>
 <LI><a href="#[1a4]">tflite::GreedyMemoryPlanner::GetMaximumMemorySize()</a>
 <LI><a href="#[394]">tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()</a>
 <LI><a href="#[396]">tflite::GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(tflite::GreedyMemoryPlanner::ListEntry const*, int, int)</a>
 <LI><a href="#[1a7]">tflite::GreedyMemoryPlanner::Init(unsigned char*, int)</a>
 <LI><a href="#[1a2]">tflite::GreedyMemoryPlanner::AddBuffer(int, int, int)</a>
 <LI><a href="#[1a3]">tflite::GreedyMemoryPlanner::AddBuffer(int, int, int, int)</a>
 <LI><a href="#[378]">tflite::GreedyMemoryPlanner::GreedyMemoryPlanner()</a>
 <LI><a href="#[490]">tflite::GreedyMemoryPlanner::GreedyMemoryPlanner__sub_object()</a>
 <LI><a href="#[1a1]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__deallocating()</a>
 <LI><a href="#[1a0]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner()</a>
 <LI><a href="#[491]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__sub_object()</a>
 <LI><a href="#[1af]">tflite::LinearMemoryPlanner::GetBufferCount()</a>
 <LI><a href="#[1b0]">tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*)</a>
 <LI><a href="#[1ae]">tflite::LinearMemoryPlanner::GetMaximumMemorySize()</a>
 <LI><a href="#[1ac]">tflite::LinearMemoryPlanner::AddBuffer(int, int, int)</a>
 <LI><a href="#[376]">tflite::LinearMemoryPlanner::LinearMemoryPlanner()</a>
 <LI><a href="#[492]">tflite::LinearMemoryPlanner::LinearMemoryPlanner__sub_object()</a>
 <LI><a href="#[1ab]">tflite::LinearMemoryPlanner::~LinearMemoryPlanner__deallocating()</a>
 <LI><a href="#[1aa]">tflite::LinearMemoryPlanner::~LinearMemoryPlanner()</a>
 <LI><a href="#[493]">tflite::LinearMemoryPlanner::~LinearMemoryPlanner__sub_object()</a>
 <LI><a href="#[358]">tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</a>
 <LI><a href="#[2f3]">tflite::Register_DEQUANTIZE()</a>
 <LI><a href="#[3a3]">tflite::ScopedMicroProfiler::~ScopedMicroProfiler()</a>
 <LI><a href="#[494]">tflite::ScopedMicroProfiler::~ScopedMicroProfiler__sub_object()</a>
 <LI><a href="#[399]">tflite::CalculateInputRadius(int, int, int)</a>
 <LI><a href="#[39c]">tflite::NumSubgraphOperators(tflite::Model const*, int)</a>
 <LI><a href="#[371]">tflite::NumSubgraphOperators(tflite::SubGraph const*)</a>
 <LI><a href="#[152]">tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[2f0]">tflite::Register_MAX_POOL_2D()</a>
 <LI><a href="#[39d]">tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)</a>
 <LI><a href="#[36d]">tflite::AllocationInfoBuilder::FreeAllocationInfo()</a>
 <LI><a href="#[367]">tflite::AllocationInfoBuilder::CreateAllocationInfo(int)</a>
 <LI><a href="#[36b]">tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a>
 <LI><a href="#[368]">tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(long const**)</a>
 <LI><a href="#[369]">tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)</a>
 <LI><a href="#[39e]">tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a>
 <LI><a href="#[16e]">tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[38c]">tflite::GetMicroErrorReporter()</a>
 <LI><a href="#[162]">tflite::MicroContextGetTensor(TfLiteContext const*, int)</a>
 <LI><a href="#[1bb]">tflite::MicroInterpreterGraph::NumSubgraphs()</a>
 <LI><a href="#[1c0]">tflite::MicroInterpreterGraph::FreeSubgraphs()</a>
 <LI><a href="#[1bd]">tflite::MicroInterpreterGraph::InitSubgraphs()</a>
 <LI><a href="#[1b6]">tflite::MicroInterpreterGraph::InvokeSubgraph(int)</a>
 <LI><a href="#[1bf]">tflite::MicroInterpreterGraph::ResetSubgraphs()</a>
 <LI><a href="#[1b8]">tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)</a>
 <LI><a href="#[1be]">tflite::MicroInterpreterGraph::PrepareSubgraphs()</a>
 <LI><a href="#[1ba]">tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)</a>
 <LI><a href="#[1b7]">tflite::MicroInterpreterGraph::NumSubgraphInputs(int)</a>
 <LI><a href="#[1b9]">tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)</a>
 <LI><a href="#[1bc]">tflite::MicroInterpreterGraph::GetResourceVariables()</a>
 <LI><a href="#[1c1]">tflite::MicroInterpreterGraph::ResetVariableTensors()</a>
 <LI><a href="#[37b]">tflite::MicroInterpreterGraph::SetSubgraphAllocations(tflite::SubgraphAllocations*)</a>
 <LI><a href="#[389]">tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</a>
 <LI><a href="#[495]">tflite::MicroInterpreterGraph::MicroInterpreterGraph__sub_object(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</a>
 <LI><a href="#[1b5]">tflite::MicroInterpreterGraph::~MicroInterpreterGraph__deallocating()</a>
 <LI><a href="#[1b4]">tflite::MicroInterpreterGraph::~MicroInterpreterGraph()</a>
 <LI><a href="#[496]">tflite::MicroInterpreterGraph::~MicroInterpreterGraph__sub_object()</a>
 <LI><a href="#[15e]">tflite::reference_integer_ops::AddFunc(signed char, signed char, tflite::ArithmeticParams const&)</a>
 <LI><a href="#[3a5]">tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)</a>
 <LI><a href="#[379]">tflite::CalculateOpDataPooling(TfLiteContext const*, TfLitePoolParams const*, TfLiteTensor const*, TfLiteTensor const*, tflite::OpDataPooling*)</a>
 <LI><a href="#[35f]">tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)</a>
 <LI><a href="#[3a4]">tflite::MicroResourceVariables::ResetAll()</a>
 <LI><a href="#[2ea]">tflite::Register_CONCATENATION()</a>
 <LI><a href="#[385]">tflite::EnumNameBuiltinOperator(tflite::BuiltinOperator)</a>
 <LI><a href="#[1cf]">tflite::MicroInterpreterContext::GetEvalTensor(int)</a>
 <LI><a href="#[1ca]">tflite::MicroInterpreterContext::GetScratchBuffer(int)</a>
 <LI><a href="#[1d1]">tflite::MicroInterpreterContext::external_context()</a>
 <LI><a href="#[1cd]">tflite::MicroInterpreterContext::AllocateTempBuffer(unsigned int, unsigned int)</a>
 <LI><a href="#[37d]">tflite::MicroInterpreterContext::SetInterpreterState(tflite::MicroInterpreterContext::InterpreterState)</a>
 <LI><a href="#[1ce]">tflite::MicroInterpreterContext::DeallocateTempBuffer(unsigned char*)</a>
 <LI><a href="#[1d0]">tflite::MicroInterpreterContext::set_external_context(void*)</a>
 <LI><a href="#[37e]">tflite::MicroInterpreterContext::SetScratchBufferHandles(tflite::ScratchBufferHandle*)</a>
 <LI><a href="#[1c8]">tflite::MicroInterpreterContext::AllocatePersistentBuffer(unsigned int)</a>
 <LI><a href="#[1cb]">tflite::MicroInterpreterContext::AllocateTempTfLiteTensor(int)</a>
 <LI><a href="#[1cc]">tflite::MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor*)</a>
 <LI><a href="#[1c9]">tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*)</a>
 <LI><a href="#[1d2]">tflite::MicroInterpreterContext::graph()</a>
 <LI><a href="#[38a]">tflite::MicroInterpreterContext::MicroInterpreterContext(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)</a>
 <LI><a href="#[497]">tflite::MicroInterpreterContext::MicroInterpreterContext__sub_object(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)</a>
 <LI><a href="#[1c7]">tflite::MicroInterpreterContext::~MicroInterpreterContext__deallocating()</a>
 <LI><a href="#[1c6]">tflite::MicroInterpreterContext::~MicroInterpreterContext()</a>
 <LI><a href="#[498]">tflite::MicroInterpreterContext::~MicroInterpreterContext__sub_object()</a>
 <LI><a href="#[387]">tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[34d]">tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)</a>
 <LI><a href="#[16f]">tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[3a8]">tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*)</a>
 <LI><a href="#[383]">tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)</a>
 <LI><a href="#[163]">tflite::MicroContextGetEvalTensor(TfLiteContext const*, int)</a>
 <LI><a href="#[161]">tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)</a>
 <LI><a href="#[150]">tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[2ef]">tflite::Register_DEPTHWISE_CONV_2D()</a>
 <LI><a href="#[1d5]">tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)</a>
 <LI><a href="#[1da]">tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)</a>
 <LI><a href="#[1d6]">tflite::SingleArenaBufferAllocator::DeallocateTemp(unsigned char*)</a>
 <LI><a href="#[1d7]">tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()</a>
 <LI><a href="#[1d8]">tflite::SingleArenaBufferAllocator::ResetTempAllocations()</a>
 <LI><a href="#[1d9]">tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)</a>
 <LI><a href="#[1e0]">tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a>
 <LI><a href="#[1db]">tflite::SingleArenaBufferAllocator::DeallocateResizableBuffer(unsigned char*)</a>
 <LI><a href="#[1dd]">tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)</a>
 <LI><a href="#[375]">tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)</a>
 <LI><a href="#[3ae]">tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator(unsigned char*, unsigned char*)</a>
 <LI><a href="#[499]">tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator__sub_object(unsigned char*, unsigned char*)</a>
 <LI><a href="#[3ad]">tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator(unsigned char*, unsigned int)</a>
 <LI><a href="#[49a]">tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator__sub_object(unsigned char*, unsigned int)</a>
 <LI><a href="#[1d4]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a>
 <LI><a href="#[1d3]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</a>
 <LI><a href="#[49b]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__sub_object()</a>
 <LI><a href="#[362]">tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)</a>
 <LI><a href="#[35d]">tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)</a>
 <LI><a href="#[167]">tflite::MicroContextGetScratchBuffer(TfLiteContext*, int)</a>
 <LI><a href="#[338]">bool tflite::ReduceDimensionsForBroadcast&lang;6&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, unsigned int*, unsigned int*, unsigned int*)</a>
 <LI><a href="#[3a1]">tflite::MultiplyByQuantizedMultiplier(long, long, int)</a>
 <LI><a href="#[165]">tflite::MicroContextGetExternalContext(TfLiteContext*, TfLiteExternalContextType)</a>
 <LI><a href="#[3af]">tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)</a>
 <LI><a href="#[3b0]">tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)</a>
 <LI><a href="#[3aa]">tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*)</a>
 <LI><a href="#[2ed]">tflite::Register_RESIZE_NEAREST_NEIGHBOR()</a>
 <LI><a href="#[319]">tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, long*, long*)</a>
 <LI><a href="#[3bb]">tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;float&rang; const*)</a>
 <LI><a href="#[386]">tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;long&rang; const*)</a>
 <LI><a href="#[318]">tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*)</a>
 <LI><a href="#[166]">tflite::MicroContextAllocatePersistentBuffer(TfLiteContext*, unsigned int)</a>
 <LI><a href="#[393]">tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)</a>
 <LI><a href="#[164]">tflite::MicroContextRequestScratchBufferInArena(TfLiteContext*, unsigned int, int*)</a>
 <LI><a href="#[322]">tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))</a>
 <LI><a href="#[324]">tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)</a>
 <LI><a href="#[325]">tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)</a>
 <LI><a href="#[328]">tflite::micro::GetTensorShape(TfLiteEvalTensor const*)</a>
 <LI><a href="#[37a]">tflite::micro::RuntimePaddingType(TfLitePadding)</a>
 <LI><a href="#[349]">tflite::micro::MakeUnpackedInt4Tensor(TfLiteContext*, int, TfLiteEvalTensor const*)</a>
 <LI><a href="#[158]">tflite::EvalAdd(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[15a]">tflite::InitAdd(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[154]">tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[14c]">tflite::ParsePad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[3b6]">tflite::internal::GetFlatbufferTensorBuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*)</a>
 <LI><a href="#[373]">tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)</a>
 <LI><a href="#[36f]">tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)</a>
 <LI><a href="#[153]">tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a>
 <LI><a href="#[303]">flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const</a>
 <LI><a href="#[31c]">signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const</a>
 <LI><a href="#[321]">float flatbuffers::Table::GetField&lang;float&rang;(unsigned short, float) const</a>
 <LI><a href="#[3ab]">unsigned char flatbuffers::Table::GetField&lang;unsigned char&rang;(unsigned short, unsigned char) const</a>
 <LI><a href="#[31e]">long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const</a>
 <LI><a href="#[2ca]">tflite::MicroAllocator::used_bytes() const</a>
 <LI><a href="#[1a8]">tflite::GreedyMemoryPlanner::preserves_all_tensors() const</a>
 <LI><a href="#[397]">tflite::GreedyMemoryPlanner::DoesEntryOverlapInTime(tflite::GreedyMemoryPlanner::ListEntry const*, int, int) const</a>
 <LI><a href="#[1b2]">tflite::LinearMemoryPlanner::preserves_all_tensors() const</a>
 <LI><a href="#[3b9]">tflite::QuantizationParameters::zero_point() const</a>
 <LI><a href="#[3b8]">tflite::QuantizationParameters::scale() const</a>
 <LI><a href="#[1df]">tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const</a>
 <LI><a href="#[1e1]">tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a>
 <LI><a href="#[1dc]">tflite::SingleArenaBufferAllocator::GetOverlayMemoryAddress() const</a>
 <LI><a href="#[1de]">tflite::SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const</a>
 <LI><a href="#[365]">tflite::Model::subgraphs() const</a>
 <LI><a href="#[361]">tflite::Tensor::is_variable() const</a>
 <LI><a href="#[3b7]">tflite::Tensor::type() const</a>
 <LI><a href="#[31b]">tflite::Operator::builtin_options() const</a>
 <LI><a href="#[31a]">tflite::Operator::builtin_options_type() const</a>
 <LI><a href="#[360]">tflite::SubGraph::tensors() const</a>
 <LI><a href="#[1e4]">non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a>
 <LI><a href="#[1e3]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a>
 <LI><a href="#[1e2]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</a>
 <LI><a href="#[1e5]">non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a>
 <LI><a href="#[2e2]">__wfe</a>
 <LI><a href="#[3c1]">addTraceToBuffer</a>
 <LI><a href="#[3c3]">arm_convolve_1_x_n_s8</a>
 <LI><a href="#[3c4]">arm_convolve_1_x_n_s8_get_buffer_size</a>
 <LI><a href="#[3c6]">arm_convolve_1x1_s8</a>
 <LI><a href="#[3c8]">arm_convolve_1x1_s8_fast</a>
 <LI><a href="#[3c9]">arm_convolve_fast_s16</a>
 <LI><a href="#[3ce]">arm_convolve_s16</a>
 <LI><a href="#[3c5]">arm_convolve_s8</a>
 <LI><a href="#[3cb]">arm_convolve_s8_get_buffer_size</a>
 <LI><a href="#[344]">arm_convolve_wrapper_s16</a>
 <LI><a href="#[35c]">arm_convolve_wrapper_s16_get_buffer_size</a>
 <LI><a href="#[340]">arm_convolve_wrapper_s8</a>
 <LI><a href="#[35b]">arm_convolve_wrapper_s8_get_buffer_size</a>
 <LI><a href="#[3d3]">arm_depthwise_conv_3x3_s8</a>
 <LI><a href="#[346]">arm_depthwise_conv_s16</a>
 <LI><a href="#[3d2]">arm_depthwise_conv_s8</a>
 <LI><a href="#[3cf]">arm_depthwise_conv_s8_opt</a>
 <LI><a href="#[3d1]">arm_depthwise_conv_s8_opt_get_buffer_size</a>
 <LI><a href="#[342]">arm_depthwise_conv_wrapper_s8</a>
 <LI><a href="#[35e]">arm_depthwise_conv_wrapper_s8_get_buffer_size</a>
 <LI><a href="#[33c]">arm_elementwise_add_s16</a>
 <LI><a href="#[339]">arm_elementwise_add_s8</a>
 <LI><a href="#[334]">arm_max_pool_s16</a>
 <LI><a href="#[335]">arm_max_pool_s8</a>
 <LI><a href="#[3ca]">arm_nn_mat_mult_kernel_s16</a>
 <LI><a href="#[3cd]">arm_nn_mat_mult_kernel_s8_s16</a>
 <LI><a href="#[3c7]">arm_nn_mat_mult_nt_t_s8</a>
 <LI><a href="#[3d4]">arm_nn_softmax_common_s8</a>
 <LI><a href="#[3d0]">arm_q7_to_q15_with_offset</a>
 <LI><a href="#[3cc]">arm_s8_to_s16_unordered_with_offset</a>
 <LI><a href="#[327]">arm_softmax_s16</a>
 <LI><a href="#[32c]">arm_softmax_s8</a>
 <LI><a href="#[32b]">arm_softmax_s8_s16</a>
 <LI><a href="#[3d7]">driverAlloc</a>
 <LI><a href="#[3d9]">driverFree</a>
 <LI><a href="#[3c2]">getTime</a>
 <LI><a href="#[353]">neutronDeinit</a>
 <LI><a href="#[3f8]">neutronFwInit</a>
 <LI><a href="#[3f1]">neutronFwInterpreter</a>
 <LI><a href="#[354]">neutronInit</a>
 <LI><a href="#[359]">neutronModelPrepare</a>
 <LI><a href="#[352]">neutronModelUnprepare</a>
 <LI><a href="#[348]">neutronRunBlocking</a>
 <LI><a href="#[347]">neutronSetTrace</a>
 <LI><a href="#[2d9]">neutron_done</a>
 <LI><a href="#[2a8]">neutron_exec</a>
 <LI><a href="#[3f0]">privateNeutronDeinit</a>
 <LI><a href="#[3f3]">privateNeutronInit</a>
 <LI><a href="#[3f4]">privateNeutronModelPrepare</a>
 <LI><a href="#[3f5]">privateNeutronModelUnprepare</a>
 <LI><a href="#[3f6]">privateNeutronRunBlocking</a>
 <LI><a href="#[3f7]">privateNeutronSetTrace</a>
 <LI><a href="#[2e1]">relocateData</a>
 <LI><a href="#[2db]">traceEvent</a>
 <LI><a href="#[3f2]">validateArgsSz</a>
 <LI><a href="#[188]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Allocate(unsigned int, unsigned int)</a>
 <LI><a href="#[189]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Deallocate(void*)</a>
 <LI><a href="#[18b]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator__deallocating()</a>
 <LI><a href="#[18a]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator()</a>
 <LI><a href="#[37f]">tflite::MicroInterpreter::inputs_size() const (.isra.0)</a>
 <LI><a href="#[380]">tflite::MicroInterpreter::outputs_size() const (.isra.0)</a>
 <LI><a href="#[2e7]">(anonymous namespace)::VDebugLog(char const*, ...) (.constprop.0)</a>
 <LI><a href="#[31d]">tflite::(anonymous namespace)::ConvertPadding(tflite::Padding)</a>
 <LI><a href="#[320]">tflite::(anonymous namespace)::SafeBuiltinDataAllocator::BuiltinDataDeleter::operator()(void*) (.isra.0)</a>
 <LI><a href="#[33a]">void tflite::reference_integer_ops::BroadcastAddRecursiveDimensions&lang;signed char&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, signed char const*, signed char const*, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) (.isra.0)</a>
 <LI><a href="#[336]">tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</a>
 <LI><a href="#[33b]">tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</a>
 <LI><a href="#[355]">tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</a>
 <LI><a href="#[179]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[178]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[332]">void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[32e]">void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[32d]">void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[331]">void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[330]">void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[32f]">void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[177]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[16a]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[169]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[343]">tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</a>
 <LI><a href="#[33f]">tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</a>
 <LI><a href="#[34c]">void tflite::reference_integer_ops::ConvPerChannel&lang;long&rang;(tflite::ConvParams const&, long const*, long const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long const*, tflite::RuntimeShape const&, short*) (.isra.0)</a>
 <LI><a href="#[168]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[180]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[17f]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[345]">tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</a>
 <LI><a href="#[341]">tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</a>
 <LI><a href="#[17e]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[15d]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[15b]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[176]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[175]">tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[333]">tflite::(anonymous namespace)::MaxEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0.isra.0)</a>
 <LI><a href="#[174]">tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[170]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[182]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[181]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[160]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[15f]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[16d]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a>
 <LI><a href="#[16b]">tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[16c]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a>
 <LI><a href="#[3a2]">tflite::(anonymous namespace)::OpNameFromRegistration(TFLMRegistration const*)</a>
 <LI><a href="#[3be]">.LTHUNK3</a>
 <LI><a href="#[3bd]">.LTHUNK2</a>
 <LI><a href="#[3b3]">tflite::(anonymous namespace)::Quantize(TfLiteContext*, float, long, float, long&)</a>
 <LI><a href="#[3a7]">tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)</a>
 <LI><a href="#[33e]">tflite::(anonymous namespace)::InitializeLutForInt16(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, tflite::SoftmaxParams*)</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[30d]">std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30d]">std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&)</a><BR>
 <LI><a href="#[310]">std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[310]">std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&)</a><BR>
 <LI><a href="#[39e]">tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36b]">tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</a><BR>
 <LI><a href="#[357]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;long&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, long, long, long const*, long const*, long*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[357]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;long&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, long, long, long const*, long const*, long*)</a><BR>
 <LI><a href="#[356]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;float&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, float, float, float const*, float const*, float*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[356]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;float&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, float, float, float const*, float const*, float*)</a><BR>
 <LI><a href="#[33d]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;short&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, short const*, short const*, short*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33d]">void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;short&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, short const*, short const*, short*)</a><BR>
 <LI><a href="#[33a]">void tflite::reference_integer_ops::BroadcastAddRecursiveDimensions&lang;signed char&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, signed char const*, signed char const*, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) (.isra.0)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33a]">void tflite::reference_integer_ops::BroadcastAddRecursiveDimensions&lang;signed char&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, signed char const*, signed char const*, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) (.isra.0)</a><BR>
 <LI><a href="#[2c1]">LPUART_Deinit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c1]">LPUART_Deinit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d7]">ADC0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[39]">ADC0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d8]">ADC1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[3a]">ADC1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[12f]">BSP32_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[91]">BSP32_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e8]">CAN0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[4a]">CAN0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e9]">CAN1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[4b]">CAN1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[107]">CDOG0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[69]">CDOG0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[108]">CDOG1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[6a]">CDOG1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[144]">CMC0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a6]">CMC0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[145]">CTI0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a7]">CTI0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c9]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[2b]">CTIMER0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ca]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[2c]">CTIMER1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[cc]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[2e]">CTIMER2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e1]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[43]">CTIMER3_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e2]">CTIMER4_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[44]">CTIMER4_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[114]">DAC0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[76]">DAC0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[115]">DAC1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[77]">DAC1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[116]">DAC2_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[78]">DAC2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[0]">DefaultISR</a> from startup_mcxn947_cm33_core0.o(.text) referenced 2 times from fsl_usdhc.o(.data.s_usdhcIsr)
 <LI><a href="#[ab]">EDMA_0_CH0_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH0_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[d]">EDMA_0_CH0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b5]">EDMA_0_CH10_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH10_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[17]">EDMA_0_CH10_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b6]">EDMA_0_CH11_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH11_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[18]">EDMA_0_CH11_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b7]">EDMA_0_CH12_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH12_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[19]">EDMA_0_CH12_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b8]">EDMA_0_CH13_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH13_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[1a]">EDMA_0_CH13_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b9]">EDMA_0_CH14_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH14_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[1b]">EDMA_0_CH14_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ba]">EDMA_0_CH15_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH15_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[1c]">EDMA_0_CH15_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ac]">EDMA_0_CH1_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH1_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[e]">EDMA_0_CH1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ad]">EDMA_0_CH2_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH2_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[f]">EDMA_0_CH2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ae]">EDMA_0_CH3_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH3_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[10]">EDMA_0_CH3_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[af]">EDMA_0_CH4_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH4_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[11]">EDMA_0_CH4_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b0]">EDMA_0_CH5_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH5_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[12]">EDMA_0_CH5_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b1]">EDMA_0_CH6_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH6_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[13]">EDMA_0_CH6_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b2]">EDMA_0_CH7_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH7_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[14]">EDMA_0_CH7_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b3]">EDMA_0_CH8_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH8_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[15]">EDMA_0_CH8_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b4]">EDMA_0_CH9_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_0_CH9_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[16]">EDMA_0_CH9_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f7]">EDMA_1_CH0_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH0_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[59]">EDMA_1_CH0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[101]">EDMA_1_CH10_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH10_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[63]">EDMA_1_CH10_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[102]">EDMA_1_CH11_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH11_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[64]">EDMA_1_CH11_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[103]">EDMA_1_CH12_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH12_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[65]">EDMA_1_CH12_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[104]">EDMA_1_CH13_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH13_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[66]">EDMA_1_CH13_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[105]">EDMA_1_CH14_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH14_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[67]">EDMA_1_CH14_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[106]">EDMA_1_CH15_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH15_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[68]">EDMA_1_CH15_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f8]">EDMA_1_CH1_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH1_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[5a]">EDMA_1_CH1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f9]">EDMA_1_CH2_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH2_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[5b]">EDMA_1_CH2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[fa]">EDMA_1_CH3_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH3_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[5c]">EDMA_1_CH3_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[fb]">EDMA_1_CH4_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH4_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[5d]">EDMA_1_CH4_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[fc]">EDMA_1_CH5_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH5_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[5e]">EDMA_1_CH5_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[fd]">EDMA_1_CH6_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH6_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[5f]">EDMA_1_CH6_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[fe]">EDMA_1_CH7_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH7_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[60]">EDMA_1_CH7_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ff]">EDMA_1_CH8_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH8_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[61]">EDMA_1_CH8_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[100]">EDMA_1_CH9_DriverIRQHandler</a> from fsl_edma_soc.o(.text.EDMA_1_CH9_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[62]">EDMA_1_CH9_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[149]">EDMA_LpspiMasterCallback</a> from fsl_lpspi_edma.o(.text.EDMA_LpspiMasterCallback) referenced 2 times from fsl_lpspi_edma.o(.text.LPSPI_MasterTransferEDMALite)
 <LI><a href="#[f3]">ELS_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[130]">ELS_ERR_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[92]">ELS_ERR_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[55]">ELS_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[111]">EMVSIM0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[73]">EMVSIM0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[112]">EMVSIM1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[74]">EMVSIM1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[126]">ENC0_COMPARE_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[88]">ENC0_COMPARE_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[127]">ENC0_HOME_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[89]">ENC0_HOME_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[129]">ENC0_IDX_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[8b]">ENC0_IDX_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[128]">ENC0_WDG_SAB_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[8a]">ENC0_WDG_SAB_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[12a]">ENC1_COMPARE_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[8c]">ENC1_COMPARE_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[12b]">ENC1_HOME_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[8d]">ENC1_HOME_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[12d]">ENC1_IDX_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[8f]">ENC1_IDX_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[12c]">ENC1_WDG_SAB_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[8e]">ENC1_WDG_SAB_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[133]">ERM_MULTI_BIT_ERROR_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[95]">ERM_MULTI_BIT_ERROR_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[132]">ERM_SINGLE_BIT_ERROR_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[94]">ERM_SINGLE_BIT_ERROR_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[13f]">ETB0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a1]">ETB0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[135]">ETHERNET_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[97]">ETHERNET_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[137]">ETHERNET_MACLP_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[99]">ETHERNET_MACLP_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[136]">ETHERNET_PMT_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[98]">ETHERNET_PMT_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[10e]">EWM0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[70]">EWM0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[113]">FLEXIO_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[75]">FLEXIO_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[11b]">FLEXPWM0_FAULT_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[7d]">FLEXPWM0_FAULT_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[11a]">FLEXPWM0_RELOAD_ERROR_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[7c]">FLEXPWM0_RELOAD_ERROR_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[11c]">FLEXPWM0_SUBMODULE0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[7e]">FLEXPWM0_SUBMODULE0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[11d]">FLEXPWM0_SUBMODULE1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[7f]">FLEXPWM0_SUBMODULE1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[11e]">FLEXPWM0_SUBMODULE2_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[80]">FLEXPWM0_SUBMODULE2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[11f]">FLEXPWM0_SUBMODULE3_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[81]">FLEXPWM0_SUBMODULE3_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[121]">FLEXPWM1_FAULT_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[83]">FLEXPWM1_FAULT_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[120]">FLEXPWM1_RELOAD_ERROR_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[82]">FLEXPWM1_RELOAD_ERROR_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[122]">FLEXPWM1_SUBMODULE0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[84]">FLEXPWM1_SUBMODULE0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[123]">FLEXPWM1_SUBMODULE1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[85]">FLEXPWM1_SUBMODULE1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[124]">FLEXPWM1_SUBMODULE2_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[86]">FLEXPWM1_SUBMODULE2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[125]">FLEXPWM1_SUBMODULE3_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[87]">FLEXPWM1_SUBMODULE3_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e4]">FLEXSPI0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[46]">FLEXSPI0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[134]">FMU0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[96]">FMU0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f1]">Freqme_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[53]">Freqme_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[10c]">GDET_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[6e]">GDET_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[bb]">GPIO00_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[1d]">GPIO00_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO00_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[bc]">GPIO01_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[1e]">GPIO01_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO01_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[bd]">GPIO10_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[1f]">GPIO10_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO10_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[be]">GPIO11_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[20]">GPIO11_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO11_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[bf]">GPIO20_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[21]">GPIO20_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO20_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c0]">GPIO21_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[22]">GPIO21_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO21_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c1]">GPIO30_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[23]">GPIO30_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO30_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c2]">GPIO31_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[24]">GPIO31_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO31_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c3]">GPIO40_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[25]">GPIO40_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO40_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c4]">GPIO41_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[26]">GPIO41_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO41_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c5]">GPIO50_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[27]">GPIO50_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO50_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c6]">GPIO51_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[28]">GPIO51_IRQHandler</a> from fsl_adapter_gpio.o(.text.GPIO51_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[117]">HSCMP0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[79]">HSCMP0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[118]">HSCMP1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[7a]">HSCMP1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[119]">HSCMP2_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[7b]">HSCMP2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[3]">HardFault_Handler</a> from zf_board_init.o(.text.HardFault_Handler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[3]">HardFault_Handler</a> from zf_board_init.o(.text.HardFault_Handler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[109]">I3C0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[6b]">I3C0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[10a]">I3C1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[6c]">I3C1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[12e]">ITRC0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[90]">ITRC0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[184]">LPSPI_MasterUserCallback</a> from zf_device_ips200.o(.text.LPSPI_MasterUserCallback) referenced 2 times from zf_device_ips200.o(.text.ips200_init)
 <LI><a href="#[139]">LPTMR0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[9b]">LPTMR0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[13a]">LPTMR1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[9c]">LPTMR1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[cd]">LP_FLEXCOMM0_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM0_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[2f]">LP_FLEXCOMM0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ce]">LP_FLEXCOMM1_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM1_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[30]">LP_FLEXCOMM1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[cf]">LP_FLEXCOMM2_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM2_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[31]">LP_FLEXCOMM2_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d0]">LP_FLEXCOMM3_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM3_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[32]">LP_FLEXCOMM3_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d1]">LP_FLEXCOMM4_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM4_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[33]">LP_FLEXCOMM4_IRQHandler</a> from zf_board_init.o(.text.LP_FLEXCOMM4_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d2]">LP_FLEXCOMM5_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM5_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[34]">LP_FLEXCOMM5_IRQHandler</a> from zf_driver_uart.o(.text.LP_FLEXCOMM5_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d3]">LP_FLEXCOMM6_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM6_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[35]">LP_FLEXCOMM6_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d4]">LP_FLEXCOMM7_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM7_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[36]">LP_FLEXCOMM7_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d5]">LP_FLEXCOMM8_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM8_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[37]">LP_FLEXCOMM8_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d6]">LP_FLEXCOMM9_DriverIRQHandler</a> from fsl_lpflexcomm.o(.text.LP_FLEXCOMM9_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[38]">LP_FLEXCOMM9_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e0]">MAILBOX_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[42]">MAILBOX_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c8]">MRT0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[2a]">MRT0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[2]">NMI_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[2]">NMI_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[10b]">NPU_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[6d]">NPU_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[aa]">OR_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[c]">OR_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e3]">OS_EVENT_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[45]">OS_EVENT_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[da]">PDM_EVENT_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[3c]">PDM_EVENT_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[d9]">PINT0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[3b]">PINT0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f4]">PKC_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[131]">PKC_ERR_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[93]">PKC_ERR_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[56]">PKC_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f0]">PLU_DriverIRQHandler</a> from zf_driver_ezh.o(.text.PLU_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[52]">PLU_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[13e]">PORT_EFT_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a0]">PORT_EFT_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f6]">PQ_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[58]">PQ_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f5]">PUF_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[57]">PUF_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[de]">RTC_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[40]">RTC_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[db]">Reserved65_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[3d]">Reserved65_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ea]">Reserved80_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[4c]">Reserved80_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[eb]">Reserved81_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[4d]">Reserved81_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ef]">Reserved85_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[51]">Reserved85_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[1]">Reset_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e5]">SAI0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[47]">SAI0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e6]">SAI1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[48]">SAI1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[13b]">SCG_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[9d]">SCG_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[cb]">SCT0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[2d]">SCT0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ee]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[50]">SEC_HYPERVISOR_CALL_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[f2]">SEC_VIO_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[54]">SEC_VIO_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[138]">SINC_FILTER_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[9a]">SINC_FILTER_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[140]">SM3_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a2]">SM3_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[df]">SMARTDMA_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[41]">SMARTDMA_IRQHandler</a> from fsl_smartdma_mcxn.o(.text.SMARTDMA_IRQHandler) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[13c]">SPC_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[9e]">SPC_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[7]">SecureFault_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a8]">SystemInit</a> from system_mcxn947_cm33_core0.o(.text.SystemInit) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[141]">TRNG0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a3]">TRNG0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[10f]">TSI_END_OF_SCAN_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[71]">TSI_END_OF_SCAN_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[110]">TSI_OUT_OF_SCAN_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[72]">TSI_OUT_OF_SCAN_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[dd]">USB0_DCD_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[3f]">USB0_DCD_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[dc]">USB0_FS_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[3e]">USB0_FS_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ed]">USB1_HS_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[4f]">USB1_HS_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[ec]">USB1_HS_PHY_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[4e]">USB1_HS_PHY_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[e7]">USDHC0_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC0_DriverIRQHandler) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[49]">USDHC0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[c7]">UTICK0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[29]">UTICK0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[10d]">VBAT0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[6f]">VBAT0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[13d]">WUU_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[9f]">WUU_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[142]">WWDT0_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a4]">WWDT0_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[143]">WWDT1_DriverIRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[a5]">WWDT1_IRQHandler</a> from startup_mcxn947_cm33_core0.o(.text) referenced from startup_mcxn947_cm33_core0.o(.isr_vector)
 <LI><a href="#[1e6]">_GLOBAL__sub_I_zf_model_process.cpp</a> from zf_model_process.o(.text._GLOBAL__sub_I_zf_model_process.cpp) referenced from zf_model_process.o(.init_array)
 <LI><a href="#[187]">yolo::DetectorPostProcess::DoPostProcess()</a> from yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcess13DoPostProcessEv) referenced from yolo_post_processing.o(.rodata._ZTVN4yolo19DetectorPostProcessE)
 <LI><a href="#[186]">yolo::DetectorPostProcess::~DetectorPostProcess__deallocating()</a> from yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcessD0Ev) referenced from yolo_post_processing.o(.rodata._ZTVN4yolo19DetectorPostProcessE)
 <LI><a href="#[185]">yolo::DetectorPostProcess::~DetectorPostProcess__sub_object()</a> from yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcessD2Ev) referenced from yolo_post_processing.o(.rodata._ZTVN4yolo19DetectorPostProcessE)
 <LI><a href="#[15c]">tflite::PadPrepare(TfLiteContext*, TfLiteNode*)</a> from pad.o(.text._ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode) referenced from pad.o(.text._ZN6tflite12Register_PADEv)
 <LI><a href="#[14e]">tflite::ParseSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite10ParseSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[159]">tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)</a> from add.o(.text._ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode) referenced from add.o(.text._ZN6tflite12Register_ADDEv)
 <LI><a href="#[151]">tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[155]">tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[175]">tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode) referenced from pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
 <LI><a href="#[16b]">tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)</a> from softmax.o(.text._ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode) referenced from softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
 <LI><a href="#[189]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Deallocate(void*)</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[188]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Allocate(unsigned int, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[18b]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator__deallocating()</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[18a]">tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator()</a> from micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
 <LI><a href="#[15b]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from pad.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced from pad.o(.text._ZN6tflite12Register_PADEv)
 <LI><a href="#[15f]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from slice.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced from slice.o(.text._ZN6tflite14Register_SLICEEv)
 <LI><a href="#[168]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced from conv.o(.text._ZN6tflite16Register_CONV_2DEv)
 <LI><a href="#[177]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from concatenation.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced from concatenation.o(.text._ZN6tflite22Register_CONCATENATIONEv)
 <LI><a href="#[17d]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from neutron.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced 2 times from neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
 <LI><a href="#[17e]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced from depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
 <LI><a href="#[181]">tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</a> from resize_nearest_neighbor.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode) referenced from resize_nearest_neighbor.o(.text._ZN6tflite32Register_RESIZE_NEAREST_NEIGHBOREv)
 <LI><a href="#[17a]">tflite::(anonymous namespace)::Free(TfLiteContext*, void*)</a> from neutron.o(.text._ZN6tflite12_GLOBAL__N_14FreeEP13TfLiteContextPv) referenced 2 times from neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
 <LI><a href="#[15d]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from pad.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced from pad.o(.text._ZN6tflite12Register_PADEv)
 <LI><a href="#[16a]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced from conv.o(.text._ZN6tflite16Register_CONV_2DEv)
 <LI><a href="#[16d]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from softmax.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced from softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
 <LI><a href="#[170]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from quantize.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced from quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
 <LI><a href="#[176]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced from pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
 <LI><a href="#[179]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from concatenation.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced from concatenation.o(.text._ZN6tflite22Register_CONCATENATIONEv)
 <LI><a href="#[17b]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from neutron.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced 2 times from neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
 <LI><a href="#[180]">tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</a> from depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj) referenced from depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
 <LI><a href="#[174]">tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)</a> from pooling.o(.text._ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode) referenced from pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
 <LI><a href="#[160]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from slice.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced from slice.o(.text._ZN6tflite14Register_SLICEEv)
 <LI><a href="#[169]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced from conv.o(.text._ZN6tflite16Register_CONV_2DEv)
 <LI><a href="#[16c]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from softmax.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced from softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
 <LI><a href="#[178]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from concatenation.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced from concatenation.o(.text._ZN6tflite22Register_CONCATENATIONEv)
 <LI><a href="#[17c]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from neutron.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced 2 times from neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
 <LI><a href="#[17f]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced from depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
 <LI><a href="#[182]">tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</a> from resize_nearest_neighbor.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode) referenced from resize_nearest_neighbor.o(.text._ZN6tflite32Register_RESIZE_NEAREST_NEIGHBOREv)
 <LI><a href="#[14f]">tflite::ParseQuantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[171]">tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)</a> from dequantize.o(.text._ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode) referenced from dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
 <LI><a href="#[173]">tflite::DequantizeInit(TfLiteContext*, char const*, unsigned int)</a> from dequantize.o(.text._ZN6tflite14DequantizeInitEP13TfLiteContextPKcj) referenced from dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
 <LI><a href="#[198]">tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[18f]">tflite::MicroAllocator::AllocateTempBuffer(unsigned int, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator18AllocateTempBufferEjj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[190]">tflite::MicroAllocator::DeallocateTempBuffer(unsigned char*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20DeallocateTempBufferEPh) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[192]">tflite::MicroAllocator::IsAllTempDeallocated()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[191]">tflite::MicroAllocator::ResetTempAllocations()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator20ResetTempAllocationsEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[19b]">tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[193]">tflite::MicroAllocator::AllocatePersistentBuffer(unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocatePersistentBufferEj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[18d]">tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[197]">tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[18e]">tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[196]">tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[19c]">tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[18c]">tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[19a]">tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[199]">tflite::MicroAllocator::AllocatePersistentTfLiteTensorInternal()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[195]">tflite::MicroAllocator::~MicroAllocator__deallocating()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[194]">tflite::MicroAllocator::~MicroAllocator()</a> from micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev) referenced from micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
 <LI><a href="#[157]">tflite::MicroOpResolver::~MicroOpResolver__sub_object()</a> from model_ops_npu.o(.text._ZN6tflite15MicroOpResolverD2Ev) referenced from model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
 <LI><a href="#[157]">tflite::MicroOpResolver::~MicroOpResolver__sub_object()</a> from model_ops_npu.o(.text._ZN6tflite15MicroOpResolverD2Ev) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[156]">tflite::ParseDequantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[14a]">tflite::MicroInterpreter::~MicroInterpreter()</a> from micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev) referenced 2 times from model.o(.text.MODEL_Init)
 <LI><a href="#[172]">tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)</a> from dequantize_common.o(.text._ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode) referenced from dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
 <LI><a href="#[19f]">tflite::MicroErrorReporter::Report(char const*, std::__va_list)</a> from micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[19e]">tflite::MicroErrorReporter::~MicroErrorReporter__deallocating()</a> from micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[19d]">tflite::MicroErrorReporter::~MicroErrorReporter()</a> from micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev) referenced from micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
 <LI><a href="#[1b3]">tflite::MicroMemoryPlanner::PrintMemoryPlan()</a> from linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1b1]">tflite::MicroMemoryPlanner::Init(unsigned char*, int)</a> from linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner4InitEPhi) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1ad]">tflite::MicroMemoryPlanner::AddBuffer(int, int, int, int)</a> from linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner9AddBufferEiiii) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[14d]">tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[1a5]">tflite::GreedyMemoryPlanner::GetBufferCount()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a9]">tflite::GreedyMemoryPlanner::PrintMemoryPlan()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a6]">tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a4]">tflite::GreedyMemoryPlanner::GetMaximumMemorySize()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a7]">tflite::GreedyMemoryPlanner::Init(unsigned char*, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner4InitEPhi) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a2]">tflite::GreedyMemoryPlanner::AddBuffer(int, int, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiii) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a3]">tflite::GreedyMemoryPlanner::AddBuffer(int, int, int, int)</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a1]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__deallocating()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1a0]">tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner()</a> from greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1af]">tflite::LinearMemoryPlanner::GetBufferCount()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner14GetBufferCountEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1b0]">tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*)</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1ae]">tflite::LinearMemoryPlanner::GetMaximumMemorySize()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1ac]">tflite::LinearMemoryPlanner::AddBuffer(int, int, int)</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner9AddBufferEiii) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1ab]">tflite::LinearMemoryPlanner::~LinearMemoryPlanner__deallocating()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD0Ev) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1aa]">tflite::LinearMemoryPlanner::~LinearMemoryPlanner()</a> from linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD0Ev) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[152]">tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[16e]">tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)</a> from quantize_common.o(.text._ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode) referenced from quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
 <LI><a href="#[162]">tflite::MicroContextGetTensor(TfLiteContext const*, int)</a> from micro_interpreter.o(.text._ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti) referenced from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[1bb]">tflite::MicroInterpreterGraph::NumSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1c0]">tflite::MicroInterpreterGraph::FreeSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1bd]">tflite::MicroInterpreterGraph::InitSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1b6]">tflite::MicroInterpreterGraph::InvokeSubgraph(int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1bf]">tflite::MicroInterpreterGraph::ResetSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1b8]">tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1be]">tflite::MicroInterpreterGraph::PrepareSubgraphs()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1ba]">tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1b7]">tflite::MicroInterpreterGraph::NumSubgraphInputs(int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1b9]">tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1bc]">tflite::MicroInterpreterGraph::GetResourceVariables()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1c1]">tflite::MicroInterpreterGraph::ResetVariableTensors()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1b5]">tflite::MicroInterpreterGraph::~MicroInterpreterGraph__deallocating()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD0Ev) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[1b4]">tflite::MicroInterpreterGraph::~MicroInterpreterGraph()</a> from micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD0Ev) referenced from micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
 <LI><a href="#[15e]">tflite::reference_integer_ops::AddFunc(signed char, signed char, tflite::ArithmeticParams const&)</a> from add.o(.text._ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE) referenced from add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.constprop.0)
 <LI><a href="#[1c5]">tflite::MicroMutableOpResolver&lang;12u&rang;::~MicroMutableOpResolver__deallocating()</a> from model_ops_npu.o(.text._ZN6tflite22MicroMutableOpResolverILj12EED0Ev) referenced from model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
 <LI><a href="#[1cf]">tflite::MicroInterpreterContext::GetEvalTensor(int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext13GetEvalTensorEi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1ca]">tflite::MicroInterpreterContext::GetScratchBuffer(int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16GetScratchBufferEi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1d1]">tflite::MicroInterpreterContext::external_context()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16external_contextEv) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1cd]">tflite::MicroInterpreterContext::AllocateTempBuffer(unsigned int, unsigned int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1ce]">tflite::MicroInterpreterContext::DeallocateTempBuffer(unsigned char*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1d0]">tflite::MicroInterpreterContext::set_external_context(void*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20set_external_contextEPv) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1c8]">tflite::MicroInterpreterContext::AllocatePersistentBuffer(unsigned int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1cb]">tflite::MicroInterpreterContext::AllocateTempTfLiteTensor(int)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1cc]">tflite::MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1c9]">tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*)</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1d2]">tflite::MicroInterpreterContext::graph()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext5graphEv) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1c7]">tflite::MicroInterpreterContext::~MicroInterpreterContext__deallocating()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD0Ev) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[1c6]">tflite::MicroInterpreterContext::~MicroInterpreterContext()</a> from micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD0Ev) referenced from micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
 <LI><a href="#[16f]">tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)</a> from quantize_common.o(.text._ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode) referenced from quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
 <LI><a href="#[163]">tflite::MicroContextGetEvalTensor(TfLiteContext const*, int)</a> from micro_interpreter.o(.text._ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti) referenced from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[161]">tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)</a> from micro_context.o(.text._ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz) referenced from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[150]">tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[1d5]">tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1da]">tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1d6]">tflite::SingleArenaBufferAllocator::DeallocateTemp(unsigned char*)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1d7]">tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1d8]">tflite::SingleArenaBufferAllocator::ResetTempAllocations()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1d9]">tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1e0]">tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1db]">tflite::SingleArenaBufferAllocator::DeallocateResizableBuffer(unsigned char*)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1dd]">tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1d4]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1d3]">tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</a> from single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[167]">tflite::MicroContextGetScratchBuffer(TfLiteContext*, int)</a> from micro_interpreter.o(.text._ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti) referenced from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[165]">tflite::MicroContextGetExternalContext(TfLiteContext*, TfLiteExternalContextType)</a> from micro_interpreter.o(.text._ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType) referenced from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[166]">tflite::MicroContextAllocatePersistentBuffer(TfLiteContext*, unsigned int)</a> from micro_interpreter.o(.text._ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj) referenced from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[164]">tflite::MicroContextRequestScratchBufferInArena(TfLiteContext*, unsigned int, int*)</a> from micro_interpreter.o(.text._ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi) referenced from micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
 <LI><a href="#[158]">tflite::EvalAdd(TfLiteContext*, TfLiteNode*)</a> from add.o(.text._ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode) referenced from add.o(.text._ZN6tflite12Register_ADDEv)
 <LI><a href="#[15a]">tflite::InitAdd(TfLiteContext*, char const*, unsigned int)</a> from add.o(.text._ZN6tflite7InitAddEP13TfLiteContextPKcj) referenced from add.o(.text._ZN6tflite12Register_ADDEv)
 <LI><a href="#[154]">tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[14c]">tflite::ParsePad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[153]">tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</a> from flatbuffer_conversions.o(.text._ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv) referenced 2 times from model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
 <LI><a href="#[1a8]">tflite::GreedyMemoryPlanner::preserves_all_tensors() const</a> from greedy_memory_planner.o(.text._ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv) referenced from greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
 <LI><a href="#[1b2]">tflite::LinearMemoryPlanner::preserves_all_tensors() const</a> from linear_memory_planner.o(.text._ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv) referenced from linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
 <LI><a href="#[1c4]">tflite::MicroMutableOpResolver&lang;12u&rang;::GetOpDataParser(tflite::BuiltinOperator) const</a> from model_ops_npu.o(.text._ZNK6tflite22MicroMutableOpResolverILj12EE15GetOpDataParserENS_15BuiltinOperatorE) referenced from model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
 <LI><a href="#[1c2]">tflite::MicroMutableOpResolver&lang;12u&rang;::FindOp(tflite::BuiltinOperator) const</a> from model_ops_npu.o(.text._ZNK6tflite22MicroMutableOpResolverILj12EE6FindOpENS_15BuiltinOperatorE) referenced from model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
 <LI><a href="#[1c3]">tflite::MicroMutableOpResolver&lang;12u&rang;::FindOp(char const*) const</a> from model_ops_npu.o(.text._ZNK6tflite22MicroMutableOpResolverILj12EE6FindOpEPKc) referenced from model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
 <LI><a href="#[1df]">tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1e1]">tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1dc]">tflite::SingleArenaBufferAllocator::GetOverlayMemoryAddress() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1de]">tflite::SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[14b]">std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;::~vector__sub_object[abi:v16000]()</a> from zf_model_process.o(.text._ZNSt3__26vectorIN4yolo16object_detection15DetectionResultENS_9allocatorIS3_EEED2B6v16000Ev) referenced 2 times from zf_model_process.o(.text._GLOBAL__sub_I_zf_model_process.cpp)
 <LI><a href="#[1e4]">non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1e3]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1e2]">non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</a> from single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[1e5]">non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</a> from single_arena_buffer_allocator.o(.text._ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv) referenced from single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
 <LI><a href="#[a9]">__main</a> from __main.o(!!!main) referenced from startup_mcxn947_cm33_core0.o(.text)
 <LI><a href="#[147]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[148]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[146]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[183]">ezh_camera_callback</a> from zf_driver_ezh.o(.text.ezh_camera_callback) referenced 2 times from zf_driver_ezh.o(.text.ezh_start)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a9]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1ea]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[44a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[44b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[44c]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[44d]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[44e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1eb]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[248]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1ed]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1f1]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1f2]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1f3]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[44f]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1f5]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f7]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f8]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f9]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1fb]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1fd]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1ff]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[200]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[201]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[203]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[450]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[205]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[207]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[209]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[20b]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[451]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[21a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[20d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[20f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[452]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[453]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[454]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[211]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[455]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[456]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[457]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[213]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[458]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[459]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[214]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[45a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[45b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[45c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[45d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[216]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[45e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[45f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[460]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[461]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[462]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[463]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[464]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[465]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[466]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[21f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[217]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[467]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[468]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[469]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[46a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[46b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[46c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[46d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1e9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[46e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[46f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[219]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[470]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[21b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ips200_init &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[471]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[25d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[472]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[220]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[d7]"></a>ADC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>ADC1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>BSP32_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[e8]"></a>CAN0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>CDOG0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>CDOG1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>CMC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>CTI0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>DAC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>DAC1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>DAC2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[0]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_usdhc.o(.data.s_usdhcIsr)
</UL>
<P><STRONG><a name="[f3]"></a>ELS_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>ELS_ERR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>EMVSIM0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>EMVSIM1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>ENC0_COMPARE_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>ENC0_HOME_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>ENC0_IDX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>ENC0_WDG_SAB_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>ENC1_COMPARE_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>ENC1_HOME_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>ENC1_IDX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>ENC1_WDG_SAB_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>ERM_MULTI_BIT_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>ERM_SINGLE_BIT_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>ETB0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>ETHERNET_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>ETHERNET_MACLP_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>ETHERNET_PMT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>EWM0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>FLEXPWM0_FAULT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>FLEXPWM0_RELOAD_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>FLEXPWM0_SUBMODULE0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>FLEXPWM0_SUBMODULE1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>FLEXPWM0_SUBMODULE2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>FLEXPWM0_SUBMODULE3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>FLEXPWM1_FAULT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>FLEXPWM1_RELOAD_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>FLEXPWM1_SUBMODULE0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>FLEXPWM1_SUBMODULE1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>FLEXPWM1_SUBMODULE2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>FLEXPWM1_SUBMODULE3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>FLEXSPI0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>FMU0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>Freqme_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>GDET_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>GPIO00_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>GPIO01_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>GPIO10_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>GPIO11_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>GPIO20_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>GPIO21_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>GPIO30_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>GPIO31_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>GPIO40_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>GPIO41_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>GPIO50_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>GPIO51_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>HSCMP0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>HSCMP1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>HSCMP2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>I3C0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>I3C1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>ITRC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>LPTMR0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>LPTMR1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>MAILBOX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[10b]"></a>NPU_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>OR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>OS_EVENT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>PDM_EVENT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>PINT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>PKC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>PKC_ERR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>PORT_EFT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>PQ_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>PUF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>Reserved65_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>Reserved80_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>Reserved81_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>Reserved85_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>SAI0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>SCG_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>SEC_HYPERVISOR_CALL_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>SEC_VIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>SINC_FILTER_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>SM3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>SMARTDMA_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>SPC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[141]"></a>TRNG0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>TSI_END_OF_SCAN_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>TSI_OUT_OF_SCAN_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>USB0_DCD_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>USB0_FS_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>USB1_HS_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>USB1_HS_PHY_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[10d]"></a>VBAT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>WUU_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>WWDT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>WWDT1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
<LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
<LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
<LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
<LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>OR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>EDMA_0_CH0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>EDMA_0_CH1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>EDMA_0_CH2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>EDMA_0_CH3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>EDMA_0_CH4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>EDMA_0_CH5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>EDMA_0_CH6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>EDMA_0_CH7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>EDMA_0_CH8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>EDMA_0_CH9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>EDMA_0_CH10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>EDMA_0_CH11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>EDMA_0_CH12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>EDMA_0_CH13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>EDMA_0_CH14_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>EDMA_0_CH15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>LP_FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>LP_FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>LP_FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>LP_FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>LP_FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>LP_FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>LP_FLEXCOMM8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>LP_FLEXCOMM9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>ADC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>PINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>PDM_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>Reserved65_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>USB0_FS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>USB0_DCD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>MAILBOX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>OS_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>FLEXSPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>SAI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>USDHC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>Reserved80_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>USB1_HS_PHY_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>USB1_HS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>SEC_HYPERVISOR_CALL_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>PLU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>Freqme_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>SEC_VIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>ELS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>PKC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>PUF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>PQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>EDMA_1_CH0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>EDMA_1_CH1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>EDMA_1_CH2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>EDMA_1_CH3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[5d]"></a>EDMA_1_CH4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>EDMA_1_CH5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[5f]"></a>EDMA_1_CH6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[60]"></a>EDMA_1_CH7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[61]"></a>EDMA_1_CH8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>EDMA_1_CH9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[63]"></a>EDMA_1_CH10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[64]"></a>EDMA_1_CH11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[65]"></a>EDMA_1_CH12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>EDMA_1_CH13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[67]"></a>EDMA_1_CH14_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[68]"></a>EDMA_1_CH15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[69]"></a>CDOG0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6a]"></a>CDOG1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6b]"></a>I3C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6c]"></a>I3C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6d]"></a>NPU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6e]"></a>GDET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6f]"></a>VBAT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>EWM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[71]"></a>TSI_END_OF_SCAN_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[72]"></a>TSI_OUT_OF_SCAN_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[73]"></a>EMVSIM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[74]"></a>EMVSIM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[75]"></a>FLEXIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[76]"></a>DAC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[77]"></a>DAC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[78]"></a>DAC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[79]"></a>HSCMP0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[7a]"></a>HSCMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[7b]"></a>HSCMP2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[7c]"></a>FLEXPWM0_RELOAD_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[7d]"></a>FLEXPWM0_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[7e]"></a>FLEXPWM0_SUBMODULE0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[7f]"></a>FLEXPWM0_SUBMODULE1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[80]"></a>FLEXPWM0_SUBMODULE2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>FLEXPWM0_SUBMODULE3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[82]"></a>FLEXPWM1_RELOAD_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[83]"></a>FLEXPWM1_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[84]"></a>FLEXPWM1_SUBMODULE0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[85]"></a>FLEXPWM1_SUBMODULE1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[86]"></a>FLEXPWM1_SUBMODULE2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[87]"></a>FLEXPWM1_SUBMODULE3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[88]"></a>ENC0_COMPARE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[89]"></a>ENC0_HOME_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>ENC0_WDG_SAB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8b]"></a>ENC0_IDX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8c]"></a>ENC1_COMPARE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8d]"></a>ENC1_HOME_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8e]"></a>ENC1_WDG_SAB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8f]"></a>ENC1_IDX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[90]"></a>ITRC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[91]"></a>BSP32_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[92]"></a>ELS_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[93]"></a>PKC_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[94]"></a>ERM_SINGLE_BIT_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[95]"></a>ERM_MULTI_BIT_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[96]"></a>FMU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[97]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[98]"></a>ETHERNET_PMT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[99]"></a>ETHERNET_MACLP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[9a]"></a>SINC_FILTER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[9b]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>LPTMR1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[9d]"></a>SCG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[9e]"></a>SPC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[9f]"></a>WUU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a0]"></a>PORT_EFT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a1]"></a>ETB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a2]"></a>SM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a3]"></a>TRNG0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a4]"></a>WWDT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a5]"></a>WWDT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a6]"></a>CMC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a7]"></a>CTI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxn947_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[239]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[473]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[225]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverFree
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[226]"></a>posix_memalign</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, h1_memalign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalign
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
</UL>

<P><STRONG><a name="[475]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
</UL>

<P><STRONG><a name="[229]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Free(TfLiteContext*, void*)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;12u&rang;::GetOpDataParser(tflite::BuiltinOperator) const
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[22b]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_zf_model_process.cpp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[2e4]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayEqual
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
</UL>

<P><STRONG><a name="[295]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_str
</UL>

<P><STRONG><a name="[39f]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(long const**)
</UL>

<P><STRONG><a name="[22d]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb565stridedtorgb888(unsigned short const*, int, int, int, int, int, unsigned char*, int, unsigned char)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_max_pool_s8
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_max_pool_s16
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;long, long&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, long const*, long const*, tflite::RuntimeShape const&, long*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::MakeUnpackedInt4Tensor(TfLiteContext*, int, TfLiteEvalTensor const*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetTensorShape(TfLiteTensor const*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_fast_s16
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*)
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove8
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
</UL>

<P><STRONG><a name="[22f]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[476]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferCreateHandleEDMA
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_CreateHandle
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_GetDefaultConfig
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_rect_on_slice_buffer(unsigned short*, int, int, int, tagodresult_t*, int, int)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_int
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::ResetAll()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_fast_s16
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
</UL>

<P><STRONG><a name="[2be]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[478]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[3bc]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv8m_maindsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;12u&rang;::FindOp(char const*) const
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1e7]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[221]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[233]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c32rtomb
</UL>

<P><STRONG><a name="[223]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[47a]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[235]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[210]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[237]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[47e]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[23a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[23c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[23d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[23e]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[23f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[23b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1f6]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[228]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[146]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[242]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1fe]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[245]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1fa]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[202]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[246]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1fc]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[204]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[241]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[22a]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[24c]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[47f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[480]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[482]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[483]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[485]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[487]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[234]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[488]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[24e]"></a>_fp_trap</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, _fptrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL>

<P><STRONG><a name="[240]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[253]"></a>_printf_fp_dec_real</STRONG> (Thumb, 618 bytes, Stack size 832 bytes, _printf_fp_dec_accurate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[256]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[257]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[206]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[208]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[258]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[20a]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[20c]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[259]"></a>_c32rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c32rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[243]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c32rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[218]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[24b]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[24a]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[236]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[255]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[252]"></a>_btod_main</STRONG> (Thumb, 422 bytes, Stack size 832 bytes, btod_accurate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_common
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[21d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[25a]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE_inner
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[24f]"></a>__rt_SIGFPE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_fpe_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE_inner
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap
</UL>

<P><STRONG><a name="[25b]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[25e]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[261]"></a>_btod_approx_div10000</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, btod_accurate_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_common
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_mul
</UL>

<P><STRONG><a name="[260]"></a>_btod_mul</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, btod_accurate_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_approx_div10000
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_common
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_pow
</UL>

<P><STRONG><a name="[262]"></a>_btod_pow</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, btod_accurate_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_common
</UL>

<P><STRONG><a name="[264]"></a>_bcd2digits</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, btod_accurate_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _bcd2digits
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_common
</UL>

<P><STRONG><a name="[25c]"></a>_btod_common</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, btod_accurate_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bcd2digits
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_pow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_mul
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_approx_div10000
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_main
</UL>

<P><STRONG><a name="[25f]"></a>__rt_SIGFPE_inner</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, defsig_fpe_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_common
</UL>

<P><STRONG><a name="[489]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>Abs</STRONG> (Thumb, 288 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Abs))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[267]"></a>Activation</STRONG> (Thumb, 464 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Activation))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[268]"></a>Add</STRONG> (Thumb, 918 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Add))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[269]"></a>BOARD_BootClockPLL150M</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, clock_config.o(.text.BOARD_BootClockPLL150M))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BOARD_BootClockPLL150M &rArr; SPC_SetActiveModeCoreLDORegulatorConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPll0MonitorMode
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROHFClocking
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetActiveModeCoreLDORegulatorConfig
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetSRAMOperateVoltage
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetActiveModeDCDCRegulatorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[273]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock_config.o(.text.BOARD_InitBootClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BOARD_InitBootClocks &rArr; BOARD_BootClockPLL150M &rArr; SPC_SetActiveModeCoreLDORegulatorConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_board_init
</UL>

<P><STRONG><a name="[274]"></a>BOARD_PowerMode_OD</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, board.o(.text.BOARD_PowerMode_OD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BOARD_PowerMode_OD &rArr; SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetSRAMOperateVoltage
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetActiveModeDCDCRegulatorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_board_init
</UL>

<P><STRONG><a name="[275]"></a>BatchMulAdd</STRONG> (Thumb, 456 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.BatchMulAdd))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[276]"></a>BitTransformation</STRONG> (Thumb, 460 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.BitTransformation))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CastInt16ToInt8
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CastInt8ToInt16
</UL>

<P><STRONG><a name="[26a]"></a>CLOCK_AttachClk</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, fsl_clock.o(.text.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[277]"></a>CLOCK_GetLPFlexCommClkFreq</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetLPFlexCommClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_GetLPFlexCommClkFreq &rArr; CLOCK_GetPll1OutFreq &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[278]"></a>CLOCK_GetPll0OutFreq</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, fsl_clock.o(.text.CLOCK_GetPll0OutFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetPll0OutFreq &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetLPFlexCommClkFreq
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[279]"></a>CLOCK_GetPll1OutFreq</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, fsl_clock.o(.text.CLOCK_GetPll1OutFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_GetPll1OutFreq &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetLPFlexCommClkFreq
</UL>

<P><STRONG><a name="[272]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[26b]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
</UL>

<P><STRONG><a name="[270]"></a>CLOCK_SetPLL0Freq</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SetPLL0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_SetPLL0Freq &rArr; CLOCK_GetPll0OutFreq &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
</UL>

<P><STRONG><a name="[271]"></a>CLOCK_SetPll0MonitorMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetPll0MonitorMode))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
</UL>

<P><STRONG><a name="[404]"></a>CLOCK_SetupClk16KClocking</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetupClk16KClocking))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
</UL>

<P><STRONG><a name="[26f]"></a>CLOCK_SetupFROHFClocking</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetupFROHFClocking))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
</UL>

<P><STRONG><a name="[c9]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[27b]"></a>CallKernel</STRONG> (Thumb, 194 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.CallKernel))
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MirrorPad
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slice
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DAtrous
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullyConnected
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalAvgPool
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalMaxPool
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CastInt16ToInt8
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CastInt8ToInt16
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulInt16
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatchMulAdd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upsample2DV1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DPointwise
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv1DStandard
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DDepthwiseV2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DDepthwiseV1
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DDepthwiseNeutron16x16Kernel3x3
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DStandardV3
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DStandardV2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DStandardV1
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernelWrapper
</UL>

<P><STRONG><a name="[292]"></a>CallKernelWrapper</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.CallKernelWrapper))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
</UL>

<P><STRONG><a name="[284]"></a>CastInt16ToInt8</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.CastInt16ToInt8))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitTransformation
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[285]"></a>CastInt8ToInt16</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.CastInt8ToInt16))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitTransformation
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[28e]"></a>Conv1DStandard</STRONG> (Thumb, 708 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv1DStandard))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[28a]"></a>Conv2DAtrous</STRONG> (Thumb, 720 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DAtrous))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[281]"></a>Conv2DDepthwiseNeutron16x16Kernel3x3</STRONG> (Thumb, 2358 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DDepthwiseNeutron16x16Kernel3x3))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[280]"></a>Conv2DDepthwiseV1</STRONG> (Thumb, 2072 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DDepthwiseV1))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[291]"></a>Conv2DDepthwiseV2</STRONG> (Thumb, 816 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DDepthwiseV2))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[27f]"></a>Conv2DPointwise</STRONG> (Thumb, 888 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DPointwise))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[27c]"></a>Conv2DStandardV1</STRONG> (Thumb, 2192 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DStandardV1))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[282]"></a>Conv2DStandardV2</STRONG> (Thumb, 1248 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DStandardV2))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[283]"></a>Conv2DStandardV3</STRONG> (Thumb, 2376 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Conv2DStandardV3))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[293]"></a>DbgConsole_Printf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_RunInference
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
</UL>

<P><STRONG><a name="[294]"></a>DbgConsole_Vprintf</STRONG> (Thumb, 1038 bytes, Stack size 104 bytes, fsl_debug_console.o(.text.DbgConsole_Vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[296]"></a>DebugLog</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, debug_log.o(.text.DebugLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvokeDebugLogCallback
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;(anonymous namespace)::VDebugLog(char const*, ...) (.constprop.0)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>

<P><STRONG><a name="[ab]"></a>EDMA_0_CH0_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH0_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>EDMA_0_CH10_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH10_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH10_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>EDMA_0_CH11_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH11_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH11_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>EDMA_0_CH12_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH12_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH12_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>EDMA_0_CH13_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH13_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH13_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>EDMA_0_CH14_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH14_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH14_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>EDMA_0_CH15_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH15_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH15_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>EDMA_0_CH1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH1_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>EDMA_0_CH2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH2_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>EDMA_0_CH3_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH3_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>EDMA_0_CH4_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH4_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>EDMA_0_CH5_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH5_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>EDMA_0_CH6_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH6_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>EDMA_0_CH7_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH7_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>EDMA_0_CH8_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH8_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>EDMA_0_CH9_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_0_CH9_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_0_CH9_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>EDMA_1_CH0_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH0_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>EDMA_1_CH10_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH10_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH10_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>EDMA_1_CH11_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH11_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH11_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>EDMA_1_CH12_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH12_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH12_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>EDMA_1_CH13_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH13_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH13_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>EDMA_1_CH14_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH14_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH14_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>EDMA_1_CH15_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH15_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH15_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>EDMA_1_CH1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH1_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>EDMA_1_CH2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH2_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>EDMA_1_CH3_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH3_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>EDMA_1_CH4_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH4_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>EDMA_1_CH5_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH5_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>EDMA_1_CH6_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH6_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>EDMA_1_CH7_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH7_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>EDMA_1_CH8_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH8_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>EDMA_1_CH9_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.EDMA_1_CH9_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_1_CH9_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[299]"></a>EDMA_ConfigChannelSoftwareTCD</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, fsl_edma.o(.text.EDMA_ConfigChannelSoftwareTCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdSetTransferConfig
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
</UL>

<P><STRONG><a name="[29b]"></a>EDMA_CreateHandle</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, fsl_edma.o(.text.EDMA_CreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EDMA_CreateHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[298]"></a>EDMA_DriverIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH15_DriverIRQHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH14_DriverIRQHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH13_DriverIRQHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH12_DriverIRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH11_DriverIRQHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH10_DriverIRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH9_DriverIRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH8_DriverIRQHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH7_DriverIRQHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH6_DriverIRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH5_DriverIRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH4_DriverIRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH3_DriverIRQHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH2_DriverIRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH1_DriverIRQHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_1_CH0_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH15_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH14_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH13_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH12_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH11_DriverIRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH10_DriverIRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH9_DriverIRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH8_DriverIRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH7_DriverIRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH6_DriverIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH5_DriverIRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH4_DriverIRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH3_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH2_DriverIRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH1_DriverIRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_0_CH0_DriverIRQHandler
</UL>

<P><STRONG><a name="[29d]"></a>EDMA_EnableChannelInterrupts</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fsl_edma.o(.text.EDMA_EnableChannelInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EDMA_EnableChannelInterrupts &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[29e]"></a>EDMA_GetDefaultConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[29c]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>

<P><STRONG><a name="[29f]"></a>EDMA_Init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EDMA_Init &rArr; EDMA_InitChannel &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_InitChannel
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[2a1]"></a>EDMA_InitChannel</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, fsl_edma.o(.text.EDMA_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EDMA_InitChannel &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
</UL>

<P><STRONG><a name="[2a2]"></a>EDMA_ResetChannel</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_ResetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EDMA_ResetChannel &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[2a3]"></a>EDMA_SetCallback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_SetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EDMA_SetCallback &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[2a4]"></a>EDMA_SetTransferConfig</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_SetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EDMA_SetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ConfigChannelSoftwareTCD
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[2a5]"></a>EDMA_StartTransfer</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EDMA_StartTransfer &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[2a6]"></a>EDMA_TcdReset</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_TcdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EDMA_TcdReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[2a7]"></a>EDMA_TcdSetTransferConfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_TcdSetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ConfigChannelSoftwareTCD
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[266]"></a>EXEC</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, NeutronRuntime.c.o(.text.EXEC))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutron_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MirrorPad
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slice
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DAtrous
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activation
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pad
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullyConnected
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalAvgPool
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalMaxPool
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitTransformation
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MulInt16
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatchMulAdd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upsample2DV1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DPointwise
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv1DStandard
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DDepthwiseV2
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DDepthwiseV1
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DDepthwiseNeutron16x16Kernel3x3
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DStandardV3
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DStandardV2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv2DStandardV1
</UL>

<P><STRONG><a name="[113]"></a>FLEXIO_DriverIRQHandler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_flexio.o(.text.FLEXIO_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXIO_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[28d]"></a>FullyConnected</STRONG> (Thumb, 528 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.FullyConnected))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[1d]"></a>GPIO00_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO00_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO00_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>GPIO01_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO01_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO01_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>GPIO10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO10_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>GPIO11_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO11_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>GPIO20_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO20_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO20_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>GPIO21_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO21_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO21_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>GPIO30_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO30_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO30_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>GPIO31_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO31_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>GPIO40_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO40_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO40_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>GPIO41_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO41_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO41_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>GPIO50_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO50_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO50_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>GPIO51_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_adapter_gpio.o(.text.GPIO51_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO51_IRQHandler &rArr; HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2ae]"></a>GPIO_GpioClearInterruptFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_GpioClearInterruptFlags))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>

<P><STRONG><a name="[2ad]"></a>GPIO_GpioGetInterruptFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_GpioGetInterruptFlags))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GpioInterruptHandle
</UL>

<P><STRONG><a name="[2aa]"></a>GPIO_PinInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[2ac]"></a>GetKernelArgSz</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, NeutronRuntime.c.o(.text.GetKernelArgSz))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKernelArgSzWrapper
</UL>

<P><STRONG><a name="[2ab]"></a>GetKernelArgSzWrapper</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.GetKernelArgSzWrapper))
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKernelArgSz
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
</UL>

<P><STRONG><a name="[406]"></a>GetMaxArgSz</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, NeutronRuntime.c.o(.text.GetMaxArgSz))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateArgsSz
</UL>

<P><STRONG><a name="[27d]"></a>GlobalAvgPool</STRONG> (Thumb, 360 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.GlobalAvgPool))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[286]"></a>GlobalMaxPool</STRONG> (Thumb, 1096 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.GlobalMaxPool))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, zf_board_init.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_level
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
<LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3dd]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_AttachSignal))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
</UL>

<P><STRONG><a name="[3de]"></a>INPUTMUX_Deinit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
</UL>

<P><STRONG><a name="[2b1]"></a>INPUTMUX_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = INPUTMUX_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
</UL>

<P><STRONG><a name="[297]"></a>InvokeDebugLogCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, debug_log.o(.text.InvokeDebugLogCallback))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
</UL>

<P><STRONG><a name="[2b2]"></a>LPSPI_CheckTransferArgument</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_CheckTransferArgument))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPSPI_CheckTransferArgument &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
</UL>

<P><STRONG><a name="[2b3]"></a>LPSPI_GetInstance</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferCreateHandleEDMA
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferPrepareEDMALite
</UL>

<P><STRONG><a name="[2b4]"></a>LPSPI_MasterGetDefaultConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPSPI_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[2b5]"></a>LPSPI_MasterInit</STRONG> (Thumb, 844 bytes, Stack size 40 bytes, fsl_lpspi.o(.text.LPSPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPSPI_MasterInit &rArr; LPSPI_MasterSetDelayTimes &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_Init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_GetBaseAddress
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[2b8]"></a>LPSPI_MasterSetDelayTimes</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, fsl_lpspi.o(.text.LPSPI_MasterSetDelayTimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPSPI_MasterSetDelayTimes &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[2ba]"></a>LPSPI_MasterTransferCreateHandleEDMA</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, fsl_lpspi_edma.o(.text.LPSPI_MasterTransferCreateHandleEDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPSPI_MasterTransferCreateHandleEDMA &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[2bb]"></a>LPSPI_MasterTransferEDMA</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_lpspi_edma.o(.text.LPSPI_MasterTransferEDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferPrepareEDMALite
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_char
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_set_region
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_scc8660
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_draw_line
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[2bd]"></a>LPSPI_MasterTransferEDMALite</STRONG> (Thumb, 914 bytes, Stack size 176 bytes, fsl_lpspi_edma.o(.text.LPSPI_MasterTransferEDMALite))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_StartTransfer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_EnableChannelInterrupts
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdSetTransferConfig
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdReset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ResetChannel
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMA
</UL>

<P><STRONG><a name="[2bc]"></a>LPSPI_MasterTransferPrepareEDMALite</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fsl_lpspi_edma.o(.text.LPSPI_MasterTransferPrepareEDMALite))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPSPI_MasterTransferPrepareEDMALite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMA
</UL>

<P><STRONG><a name="[184]"></a>LPSPI_MasterUserCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zf_device_ips200.o(.text.LPSPI_MasterUserCallback))
<BR>[Address Reference Count : 1]<UL><LI> zf_device_ips200.o(.text.ips200_init)
</UL>
<P><STRONG><a name="[405]"></a>LPTMR_Deinit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_lptmr.o(.text.LPTMR_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
</UL>

<P><STRONG><a name="[2bf]"></a>LPTMR_GetDefaultConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_lptmr.o(.text.LPTMR_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPTMR_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
</UL>

<P><STRONG><a name="[2c0]"></a>LPTMR_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_lptmr.o(.text.LPTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPTMR_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
</UL>

<P><STRONG><a name="[2c7]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM5_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM4_IRQHandler
</UL>

<P><STRONG><a name="[2c1]"></a>LPUART_Deinit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = LPUART_Deinit &rArr;  LPUART_Deinit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[3d6]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[2c3]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[2c6]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM5_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM4_IRQHandler
</UL>

<P><STRONG><a name="[2c4]"></a>LPUART_Init</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPUART_Init &rArr; LP_FLEXCOMM_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[2c5]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_user_printf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_debug_printf
</UL>

<P><STRONG><a name="[cd]"></a>LP_FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>LP_FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>LP_FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>LP_FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>LP_FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>LP_FLEXCOMM4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, zf_board_init.o(.text.LP_FLEXCOMM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM4_IRQHandler &rArr; LPUART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[d2]"></a>LP_FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>LP_FLEXCOMM5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, zf_driver_uart.o(.text.LP_FLEXCOMM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM5_IRQHandler &rArr; LPUART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[d3]"></a>LP_FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>LP_FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>LP_FLEXCOMM8_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>LP_FLEXCOMM9_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM9_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_FLEXCOMM9_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[2c2]"></a>LP_FLEXCOMM_Deinit</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LP_FLEXCOMM_Deinit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>

<P><STRONG><a name="[2b6]"></a>LP_FLEXCOMM_GetBaseAddress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM_GetBaseAddress))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
</UL>

<P><STRONG><a name="[2b7]"></a>LP_FLEXCOMM_Init</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, fsl_lpflexcomm.o(.text.LP_FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LP_FLEXCOMM_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[408]"></a>MODEL_GetAnchors</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, model.o(.text.MODEL_GetAnchors))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[2c9]"></a>MODEL_GetArenaUsedBytes</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, model.o(.text.MODEL_GetArenaUsedBytes))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::used_bytes() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[2cb]"></a>MODEL_GetInputTensorData</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, model.o(.text.MODEL_GetInputTensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MODEL_GetInputTensorData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[2cd]"></a>MODEL_GetOutputSize</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, model.o(.text.MODEL_GetOutputSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MODEL_GetOutputSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[2ce]"></a>MODEL_GetOutputTensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, model.o(.text.MODEL_GetOutputTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MODEL_GetOutputTensor &rArr; tflite::MicroInterpreter::output(unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[2d0]"></a>MODEL_GetOutputTensorData</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, model.o(.text.MODEL_GetOutputTensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MODEL_GetOutputTensorData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[2d1]"></a>MODEL_Init</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, model.o(.text.MODEL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MODEL_Init &rArr; MODEL_GetOpsResolver() &rArr; tflite::MicroMutableOpResolver&lang;12u&rang;::AddBuiltin(tflite::BuiltinOperator, TFLMRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[2d7]"></a>MODEL_RunInference</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, model.o(.text.MODEL_RunInference))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MODEL_RunInference &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
</UL>

<P><STRONG><a name="[27e]"></a>MaxPool</STRONG> (Thumb, 1288 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.MaxPool))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[288]"></a>MemCpy</STRONG> (Thumb, 956 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.MemCpy))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutron_done
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[28f]"></a>MirrorPad</STRONG> (Thumb, 496 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.MirrorPad))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[28b]"></a>MulInt16</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.MulInt16))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[3f9]"></a>NeutronFirmwareTraceInit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, NeutronFirmwareTrace.c.o(.text.NeutronFirmwareTraceInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronRunBlocking
</UL>

<P><STRONG><a name="[2da]"></a>NeutronMicroInstrPost</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.NeutronMicroInstrPost))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
</UL>

<P><STRONG><a name="[2dc]"></a>NeutronMicroInstrPre</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.NeutronMicroInstrPre))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
</UL>

<P><STRONG><a name="[f0]"></a>PLU_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zf_driver_ezh.o(.text.PLU_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PLU_DriverIRQHandler &rArr; ezh_camera_display_callback &rArr; ezh_copy_slice_to_model_input &rArr; rgb565stridedtorgb888(unsigned short const*, int, int, int, int, int, unsigned char*, int, unsigned char) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_camera_display_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[28c]"></a>Pad</STRONG> (Thumb, 288 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Pad))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[2a0]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
</UL>

<P><STRONG><a name="[2de]"></a>RESET_PeripheralReset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fsl_reset.o(.text.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RESET_PeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_Init
</UL>

<P><STRONG><a name="[2c8]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_Deinit
</UL>

<P><STRONG><a name="[3db]"></a>SMARTDMA_Boot</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_smartdma.o(.text.SMARTDMA_Boot))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_camera_display_callback
</UL>

<P><STRONG><a name="[2df]"></a>SMARTDMA_HandleIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_smartdma.o(.text.SMARTDMA_HandleIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>SMARTDMA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_smartdma_mcxn.o(.text.SMARTDMA_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e0]"></a>SMARTDMA_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_smartdma.o(.text.SMARTDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SMARTDMA_Init &rArr; RESET_PeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
</UL>

<P><STRONG><a name="[3df]"></a>SMARTDMA_InstallCallback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_smartdma.o(.text.SMARTDMA_InstallCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
</UL>

<P><STRONG><a name="[26d]"></a>SPC_SetActiveModeCoreLDORegulatorConfig</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, fsl_spc.o(.text.SPC_SetActiveModeCoreLDORegulatorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPC_SetActiveModeCoreLDORegulatorConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
</UL>

<P><STRONG><a name="[26c]"></a>SPC_SetActiveModeDCDCRegulatorConfig</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, fsl_spc.o(.text.SPC_SetActiveModeDCDCRegulatorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPC_SetActiveModeDCDCRegulatorConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_PowerMode_OD
</UL>

<P><STRONG><a name="[26e]"></a>SPC_SetSRAMOperateVoltage</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fsl_spc.o(.text.SPC_SetSRAMOperateVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL150M
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_PowerMode_OD
</UL>

<P><STRONG><a name="[287]"></a>Sequence</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Sequence))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wfe
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateData
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[289]"></a>Slice</STRONG> (Thumb, 1368 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Slice))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutron_done
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[a8]"></a>SystemInit</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, system_mcxn947_cm33_core0.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[48a]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mcxn947_cm33_core0.o(.text.SystemInitHook), UNUSED)

<P><STRONG><a name="[2e3]"></a>TfLiteIntArrayEqual</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, common.o(.text.TfLiteIntArrayEqual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TfLiteIntArrayEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
</UL>

<P><STRONG><a name="[3ba]"></a>TfLiteIntArrayGetSizeInBytes</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, common.o(.text.TfLiteIntArrayGetSizeInBytes))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[326]"></a>TfLiteTypeGetName</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, common.o(.text.TfLiteTypeGetName))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
</UL>

<P><STRONG><a name="[e7]"></a>USDHC0_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxn947_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[290]"></a>Upsample2DV1</STRONG> (Thumb, 1264 bytes, Stack size unknown bytes, NeutronKernels.c.o(.text.Upsample2DV1))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernel
</UL>

<P><STRONG><a name="[2e5]"></a>MicroPrintf(char const*, ...)</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, micro_log.o(.text._Z11MicroPrintfPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::set_external_context(void*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(long const**)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Free(TfLiteContext*, void*)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;12u&rang;::AddBuiltin(tflite::BuiltinOperator, TFLMRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**))
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::AddBuffer(int, int, int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LinearMemoryPlanner::AddBuffer(int, int, int)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResetTempAllocations()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;long, long&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, long const*, long const*, tflite::RuntimeShape const&, long*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[2e6]"></a>VMicroPrintf(char const*, std::__va_list)</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_log.o(.text._Z12VMicroPrintfPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;(anonymous namespace)::VDebugLog(char const*, ...) (.constprop.0)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroErrorReporter::Report(char const*, std::__va_list)
</UL>

<P><STRONG><a name="[2d2]"></a>MODEL_GetOpsResolver()</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MODEL_GetOpsResolver() &rArr; tflite::MicroMutableOpResolver&lang;12u&rang;::AddBuiltin(tflite::BuiltinOperator, TFLMRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_NEUTRON_GRAPH()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetString_NEUTRON_GRAPH()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEQUANTIZE()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SOFTMAX()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ADD()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MAX_POOL_2D()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEPTHWISE_CONV_2D()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CONV_2D()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RESIZE_NEAREST_NEIGHBOR()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_QUANTIZE()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SLICE()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CONCATENATION()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroMutableOpResolver&lang;12u&rang;::AddBuiltin(tflite::BuiltinOperator, TFLMRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**))
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_PAD()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
</UL>

<P><STRONG><a name="[2f6]"></a>rgb565stridedtorgb888(unsigned short const*, int, int, int, int, int, unsigned char*, int, unsigned char)</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, zf_model_process.o(.text._Z21rgb565stridedtorgb888PKtiiiiiPhih))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rgb565stridedtorgb888(unsigned short const*, int, int, int, int, int, unsigned char*, int, unsigned char) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_copy_slice_to_model_input
</UL>

<P><STRONG><a name="[2f7]"></a>zf_model_odresult_out(tagodresult_t const*, int)</STRONG> (Thumb, 728 bytes, Stack size 96 bytes, zf_model_process.o(.text._Z21zf_model_odresult_outPK13tagodresult_ti))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = zf_model_odresult_out(tagodresult_t const*, int) &rArr; ips200_show_int &rArr; ips200_show_char &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_int
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_user_printf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_debug_printf
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
</UL>

<P><STRONG><a name="[300]"></a>draw_rect_on_slice_buffer(unsigned short*, int, int, int, tagodresult_t*, int, int)</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, zf_model_process.o(.text._Z25draw_rect_on_slice_bufferPtiiiP13tagodresult_tii))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = draw_rect_on_slice_buffer(unsigned short*, int, int, int, tagodresult_t*, int, int) &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
</UL>

<P><STRONG><a name="[301]"></a>AbortImpl()</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, add.o(.text._Z9AbortImplv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = AbortImpl() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[302]"></a>flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::outputs_size() const (.isra.0)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::inputs_size() const (.isra.0)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::NumSubgraphInputs(int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)
</UL>

<P><STRONG><a name="[187]"></a>yolo::DetectorPostProcess::DoPostProcess()</STRONG> (Thumb, 496 bytes, Stack size 120 bytes, yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcess13DoPostProcessEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = yolo::DetectorPostProcess::DoPostProcess() &rArr; yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove8
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yolo_post_processing.o(.rodata._ZTVN4yolo19DetectorPostProcessE)
</UL>
<P><STRONG><a name="[304]"></a>yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)</STRONG> (Thumb, 1674 bytes, Stack size 176 bytes, yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcess15GetNetworkBoxesERNS_16object_detection7NetworkEiifRNSt3__212forward_listINS_5image9DetectionENS4_9allocatorIS7_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
</UL>

<P><STRONG><a name="[30e]"></a>yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)</STRONG> (Thumb, 564 bytes, Stack size 120 bytes, yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcessC2EPPK12TfLiteTensorRNSt3__26vectorINS_16object_detection15DetectionResultENS5_9allocatorIS8_EEEERKNS7_17PostProcessParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&) &rArr; std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
</UL>

<P><STRONG><a name="[48b]"></a>yolo::DetectorPostProcess::DetectorPostProcess__sub_object(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)</STRONG> (Thumb, 564 bytes, Stack size 120 bytes, yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcessC2EPPK12TfLiteTensorRNSt3__26vectorINS_16object_detection15DetectionResultENS5_9allocatorIS8_EEEERKNS7_17PostProcessParamsE), UNUSED)

<P><STRONG><a name="[186]"></a>yolo::DetectorPostProcess::~DetectorPostProcess__deallocating()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcessD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yolo::DetectorPostProcess::~DetectorPostProcess__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yolo_post_processing.o(.rodata._ZTVN4yolo19DetectorPostProcessE)
</UL>
<P><STRONG><a name="[185]"></a>yolo::DetectorPostProcess::~DetectorPostProcess__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, yolo_post_processing.o(.text._ZN4yolo19DetectorPostProcessD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yolo::DetectorPostProcess::~DetectorPostProcess__sub_object() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> yolo_post_processing.o(.rodata._ZTVN4yolo19DetectorPostProcessE)
</UL>
<P><STRONG><a name="[305]"></a>yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, yolo_post_processing.o(.text._ZN4yolo5image12CalculateNMSERNSt3__212forward_listINS0_9DetectionENS1_9allocatorIS3_EEEEif))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float) &rArr; std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&) &rArr;  std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::image::CalculateBoxIOU(yolo::image::Box&, yolo::image::Box&)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
</UL>

<P><STRONG><a name="[311]"></a>yolo::image::CalculateBoxIOU(yolo::image::Box&, yolo::image::Box&)</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, yolo_post_processing.o(.text._ZN4yolo5image15CalculateBoxIOUERNS0_3BoxES2_))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)
</UL>

<P><STRONG><a name="[15c]"></a>tflite::PadPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1100 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tflite::PadPrepare(TfLiteContext*, TfLiteNode*) &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetTensorShape(TfLiteTensor const*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.text._ZN6tflite12Register_PADEv)
</UL>
<P><STRONG><a name="[14e]"></a>tflite::ParseSlice(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite10ParseSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[159]"></a>tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 800 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareAdd(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, long*, long*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12Register_ADDEv)
</UL>
<P><STRONG><a name="[36c]"></a>tflite::AlignSizeUp(unsigned int, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, memory_helpers.o(.text._ZN6tflite11AlignSizeUpEjj))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[151]"></a>tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SafeBuiltinDataAllocator::BuiltinDataDeleter::operator()(void*) (.isra.0)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ConvertPadding(tflite::Padding)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[3a0]"></a>tflite::ElementCount(TfLiteIntArray const&)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_utils.o(.text._ZN6tflite12ElementCountERK14TfLiteIntArray))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[312]"></a>tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, micro_context.o(.text._ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PadPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[313]"></a>tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, micro_context.o(.text._ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PadPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[155]"></a>tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float flatbuffers::Table::GetField&lang;float&rang;(unsigned short, float) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[2f1]"></a>tflite::Register_ADD()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite12Register_ADDEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[2e8]"></a>tflite::Register_PAD()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite12Register_PADEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[3b5]"></a>tflite::tensor_utils::UnpackDenseInt4IntoInt8(signed char const*, int, signed char*)</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, portable_tensor_utils.o(.text._ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::MakeUnpackedInt4Tensor(TfLiteContext*, int, TfLiteEvalTensor const*)
</UL>

<P><STRONG><a name="[38d]"></a>tflite::ErrorReporter::Report(char const*, ...)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, error_reporter.o(.text._ZN6tflite13ErrorReporter6ReportEPKcz))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
</UL>

<P><STRONG><a name="[14f]"></a>tflite::ParseQuantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[337]"></a>tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)</STRONG> (Thumb, 442 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*) &rArr; AbortImpl() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[356]"></a>void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;float&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, float, float, float const*, float const*, float*)</STRONG> (Thumb, 442 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIfEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_))
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;float&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, float, float, float const*, float const*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;float&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, float, float, float const*, float const*, float*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[357]"></a>void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;long&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, long, long, long const*, long const*, long*)</STRONG> (Thumb, 402 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIlEEviPjS2_S2_S2_S2_S2_T_S3_PKS3_S5_PS3_))
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;long&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, long, long, long const*, long const*, long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;long&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, long, long, long const*, long const*, long*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[33d]"></a>void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;short&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, short const*, short const*, short*)</STRONG> (Thumb, 692 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite13reference_ops31BroadcastAddRecursiveDimensionsIsEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_))
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;short&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, short const*, short const*, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;short&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, short const*, short const*, short*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[398]"></a>tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 448 bytes, Stack size unknown bytes, pooling_common.o(.text._ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[351]"></a>void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)</STRONG> (Thumb, 532 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34f]"></a>void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)</STRONG> (Thumb, 544 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[350]"></a>void tflite::reference_ops::PadImpl&lang;long, long&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, long const*, long const*, tflite::RuntimeShape const&, long*)</STRONG> (Thumb, 540 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;long, long&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, long const*, long const*, tflite::RuntimeShape const&, long*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34e]"></a>void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)</STRONG> (Thumb, 540 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite13reference_ops7PadImplIssEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[36e]"></a>tflite::AlignPointerUp(unsigned char*, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, memory_helpers.o(.text._ZN6tflite14AlignPointerUpEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::GetScratchBufferRequests()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[171]"></a>tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 432 bytes, Stack size unknown bytes, dequantize.o(.text._ZN6tflite14DequantizeEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::DequantizeEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
</UL>
<P><STRONG><a name="[173]"></a>tflite::DequantizeInit(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, dequantize.o(.text._ZN6tflite14DequantizeInitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
</UL>
<P><STRONG><a name="[384]"></a>tflite::GetBuiltinCode(tflite::OperatorCode const*)</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, schema_utils.o(.text._ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[314]"></a>tflite::GetTensorShape(TfLiteTensor const*)</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, tensor_ctypes.o(.text._ZN6tflite14GetTensorShapeEPK12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tflite::GetTensorShape(TfLiteTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PadPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[315]"></a>tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*)</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tflite::HaveSameShapes(TfLiteTensor const*, TfLiteTensor const*) &rArr; TfLiteIntArrayEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayEqual
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[198]"></a>tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*)</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubGraph::tensors() const
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Tensor::is_variable() const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[18f]"></a>tflite::MicroAllocator::AllocateTempBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator18AllocateTempBufferEjj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[190]"></a>tflite::MicroAllocator::DeallocateTempBuffer(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20DeallocateTempBufferEPh))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[192]"></a>tflite::MicroAllocator::IsAllTempDeallocated()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[191]"></a>tflite::MicroAllocator::ResetTempAllocations()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20ResetTempAllocationsEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[363]"></a>tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::StartModelAllocation(tflite::Model const*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::InitScratchBufferData()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[366]"></a>tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[364]"></a>tflite::MicroAllocator::InitScratchBufferData()</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator21InitScratchBufferDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
</UL>

<P><STRONG><a name="[19b]"></a>tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)</STRONG> (Thumb, 456 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*) &rArr; tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::FreeAllocationInfo()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(long const**)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::GetScratchBufferRequests()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignSizeUp(unsigned int, unsigned int)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[382]"></a>tflite::MicroAllocator::GetBuiltinDataAllocator()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[193]"></a>tflite::MicroAllocator::AllocatePersistentBuffer(unsigned int)</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocatePersistentBufferEj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[18d]"></a>tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateTempTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[36a]"></a>tflite::MicroAllocator::GetScratchBufferRequests()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv))
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
</UL>

<P><STRONG><a name="[197]"></a>tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubGraph::tensors() const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[18e]"></a>tflite::MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor*)</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[370]"></a>tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::GetScratchBufferRequests()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*)
</UL>

<P><STRONG><a name="[196]"></a>tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[19c]"></a>tflite::MicroAllocator::AllocateScratchBufferHandles(tflite::ScratchBufferHandle**, unsigned int)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[372]"></a>tflite::MicroAllocator::FinishPrepareNodeAllocations(int)</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi))
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::GetScratchBufferRequests()
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
</UL>

<P><STRONG><a name="[18c]"></a>tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int)</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::AllocatePersistentTfLiteTensor(tflite::Model const*, tflite::SubgraphAllocations const*, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[19a]"></a>tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool) &rArr; tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubGraph::tensors() const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[199]"></a>tflite::MicroAllocator::AllocatePersistentTfLiteTensorInternal()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[377]"></a>tflite::MicroAllocator::Create(tflite::SingleArenaBufferAllocator*, tflite::MicroMemoryPlanner*)</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
</UL>

<P><STRONG><a name="[374]"></a>tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType) &rArr; tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int) &rArr; tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GreedyMemoryPlanner()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::LinearMemoryPlanner::LinearMemoryPlanner()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(tflite::SingleArenaBufferAllocator*, tflite::MicroMemoryPlanner*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)
</UL>

<P><STRONG><a name="[195]"></a>tflite::MicroAllocator::~MicroAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[194]"></a>tflite::MicroAllocator::~MicroAllocator()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite14MicroAllocatorE)
</UL>
<P><STRONG><a name="[48c]"></a>tflite::MicroAllocator::~MicroAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite14MicroAllocatorD0Ev), UNUSED)

<P><STRONG><a name="[323]"></a>tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 296 bytes, Stack size unknown bytes, pooling_common.o(.text._ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, long*, long*)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataPooling(TfLiteContext const*, TfLitePoolParams const*, TfLiteTensor const*, TfLiteTensor const*, tflite::OpDataPooling*)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2eb]"></a>tflite::Register_SLICE()</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, slice.o(.text._ZN6tflite14Register_SLICEEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[34a]"></a>tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, conv_common.o(.text._ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE))
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RuntimePaddingType(TfLitePadding)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[157]"></a>tflite::MicroOpResolver::~MicroOpResolver__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model_ops_npu.o(.text._ZN6tflite15MicroOpResolverD2Ev))
<BR>[Address Reference Count : 2]<UL><LI> model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
<LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[156]"></a>tflite::ParseDequantize(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[3ac]"></a>tflite::AlignPointerDown(unsigned char*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, memory_helpers.o(.text._ZN6tflite16AlignPointerDownEPhj))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[2d3]"></a>tflite::MicroInterpreter::AllocateTensors()</STRONG> (Thumb, 456 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter15AllocateTensorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::AllocateTensors() &rArr; tflite::MicroInterpreterGraph::PrepareSubgraphs() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::SetScratchBufferHandles(tflite::ScratchBufferHandle*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InitSubgraphs()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::SetSubgraphAllocations(tflite::SubgraphAllocations*)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Reset()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::SetInterpreterState(tflite::MicroInterpreterContext::InterpreterState)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::outputs_size() const (.isra.0)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::inputs_size() const (.isra.0)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishModelAllocation(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle**)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
</UL>

<P><STRONG><a name="[37c]"></a>tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()</STRONG> (Thumb, 516 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() &rArr; tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetBuiltinCode(tflite::OperatorCode const*)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::NumSubgraphs()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EnumNameBuiltinOperator(tflite::BuiltinOperator)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::GetBuiltinDataAllocator()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;long&rang; const*)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[388]"></a>tflite::MicroInterpreter::Init(tflite::MicroProfilerInterface*)</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE))
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::SetInterpreterState(tflite::MicroInterpreterContext::InterpreterState)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)
</UL>

<P><STRONG><a name="[381]"></a>tflite::MicroInterpreter::Reset()</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::Reset() &rArr; tflite::MicroInterpreterGraph::ResetVariableTensors() &rArr; tflite::MicroResourceVariables::ResetAll() &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetSubgraphs()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[2cc]"></a>tflite::MicroInterpreter::input(unsigned int)</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter5inputEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::input(unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::inputs_size() const (.isra.0)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetInputTensorData
</UL>

<P><STRONG><a name="[2d8]"></a>tflite::MicroInterpreter::Invoke()</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter6InvokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::Invoke() &rArr; tflite::MicroInterpreterGraph::InvokeSubgraph(int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_RunInference
</UL>

<P><STRONG><a name="[2cf]"></a>tflite::MicroInterpreter::output(unsigned int)</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreter6outputEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::output(unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::outputs_size() const (.isra.0)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOutputTensor
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOutputTensorData
</UL>

<P><STRONG><a name="[2d5]"></a>tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool) &rArr; tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType) &rArr; tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int) &rArr; tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::MicroInterpreterContext(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Init(tflite::MicroProfilerInterface*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
</UL>

<P><STRONG><a name="[48d]"></a>tflite::MicroInterpreter::MicroInterpreter__sub_object(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterC2EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb), UNUSED)

<P><STRONG><a name="[14a]"></a>tflite::MicroInterpreter::~MicroInterpreter()</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::~MicroInterpreterGraph()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterContext::~MicroInterpreterContext()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.text.MODEL_Init)
</UL>
<P><STRONG><a name="[48e]"></a>tflite::MicroInterpreter::~MicroInterpreter__sub_object()</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite16MicroInterpreterD2Ev), UNUSED)

<P><STRONG><a name="[2ee]"></a>tflite::Register_CONV_2D()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, conv.o(.text._ZN6tflite16Register_CONV_2DEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[2f2]"></a>tflite::Register_SOFTMAX()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, softmax.o(.text._ZN6tflite16Register_SOFTMAXEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[3a6]"></a>tflite::TfLiteTypeSizeOf(TfLiteType, unsigned int*)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, memory_helpers.o(.text._ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
</UL>

<P><STRONG><a name="[38b]"></a>tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, flatbuffer_conversions_bridge.o(.text._ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetMicroErrorReporter()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[31f]"></a>tflite::ConvertTensorType(tflite::TensorType, TfLiteType*, tflite::ErrorReporter*)</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE))
<BR><BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ErrorReporter::Report(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
</UL>

<P><STRONG><a name="[172]"></a>tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, dequantize_common.o(.text._ZN6tflite17DequantizePrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*) &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv)
</UL>
<P><STRONG><a name="[2ec]"></a>tflite::Register_QUANTIZE()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, quantize.o(.text._ZN6tflite17Register_QUANTIZEEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[19f]"></a>tflite::MicroErrorReporter::Report(char const*, std::__va_list)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroErrorReporter::Report(char const*, std::__va_list) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[19e]"></a>tflite::MicroErrorReporter::~MicroErrorReporter__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[19d]"></a>tflite::MicroErrorReporter::~MicroErrorReporter()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_error_reporter.o(.rodata._ZTVN6tflite18MicroErrorReporterE)
</UL>
<P><STRONG><a name="[48f]"></a>tflite::MicroErrorReporter::~MicroErrorReporter__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_error_reporter.o(.text._ZN6tflite18MicroErrorReporterD0Ev), UNUSED)

<P><STRONG><a name="[1b3]"></a>tflite::MicroMemoryPlanner::PrintMemoryPlan()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[1b1]"></a>tflite::MicroMemoryPlanner::Init(unsigned char*, int)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner4InitEPhi))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[1ad]"></a>tflite::MicroMemoryPlanner::AddBuffer(int, int, int, int)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite18MicroMemoryPlanner9AddBufferEiiii))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[14d]"></a>tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[38e]"></a>tflite::QuantizeMultiplier(double, long*, int*)</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, quantization_util.o(.text._ZN6tflite18QuantizeMultiplierEdPlPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
</UL>

<P><STRONG><a name="[395]"></a>tflite::ReverseSortInPlace(int*, int*, int)</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite18ReverseSortInPlaceEPiS0_i))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>

<P><STRONG><a name="[35a]"></a>tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)</STRONG> (Thumb, 620 bytes, Stack size unknown bytes, conv_common.o(.text._ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34b]"></a>tflite::ConvParamsQuantized(TfLiteConvParams const&, tflite::OpDataConv const&)</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, conv_common.o(.text._ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE))
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RuntimePaddingType(TfLitePadding)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[1a5]"></a>tflite::GreedyMemoryPlanner::GetBufferCount()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1a9]"></a>tflite::GreedyMemoryPlanner::PrintMemoryPlan()</STRONG> (Thumb, 388 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::GreedyMemoryPlanner::PrintMemoryPlan() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1a6]"></a>tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1a4]"></a>tflite::GreedyMemoryPlanner::GetMaximumMemorySize()</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv))
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[394]"></a>tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()</STRONG> (Thumb, 372 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv))
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(tflite::GreedyMemoryPlanner::ListEntry const*, int, int)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ReverseSortInPlace(int*, int*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetOffsetForBuffer(int, int*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::PrintMemoryPlan()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::GetMaximumMemorySize()
</UL>

<P><STRONG><a name="[396]"></a>tflite::GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(tflite::GreedyMemoryPlanner::ListEntry const*, int, int)</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii))
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::DoesEntryOverlapInTime(tflite::GreedyMemoryPlanner::ListEntry const*, int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::CalculateOffsetsIfNeeded()
</UL>

<P><STRONG><a name="[1a7]"></a>tflite::GreedyMemoryPlanner::Init(unsigned char*, int)</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner4InitEPhi))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1a2]"></a>tflite::GreedyMemoryPlanner::AddBuffer(int, int, int)</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::GreedyMemoryPlanner::AddBuffer(int, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1a3]"></a>tflite::GreedyMemoryPlanner::AddBuffer(int, int, int, int)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[378]"></a>tflite::GreedyMemoryPlanner::GreedyMemoryPlanner()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
</UL>

<P><STRONG><a name="[490]"></a>tflite::GreedyMemoryPlanner::GreedyMemoryPlanner__sub_object()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerC2Ev), UNUSED)

<P><STRONG><a name="[1a1]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[1a0]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[491]"></a>tflite::GreedyMemoryPlanner::~GreedyMemoryPlanner__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZN6tflite19GreedyMemoryPlannerD0Ev), UNUSED)

<P><STRONG><a name="[1af]"></a>tflite::LinearMemoryPlanner::GetBufferCount()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner14GetBufferCountEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[1b0]"></a>tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*)</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::LinearMemoryPlanner::GetOffsetForBuffer(int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[1ae]"></a>tflite::LinearMemoryPlanner::GetMaximumMemorySize()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[1ac]"></a>tflite::LinearMemoryPlanner::AddBuffer(int, int, int)</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlanner9AddBufferEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::LinearMemoryPlanner::AddBuffer(int, int, int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[376]"></a>tflite::LinearMemoryPlanner::LinearMemoryPlanner()</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
</UL>

<P><STRONG><a name="[492]"></a>tflite::LinearMemoryPlanner::LinearMemoryPlanner__sub_object()</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerC2Ev), UNUSED)

<P><STRONG><a name="[1ab]"></a>tflite::LinearMemoryPlanner::~LinearMemoryPlanner__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[1aa]"></a>tflite::LinearMemoryPlanner::~LinearMemoryPlanner()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[493]"></a>tflite::LinearMemoryPlanner::~LinearMemoryPlanner__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZN6tflite19LinearMemoryPlannerD0Ev), UNUSED)

<P><STRONG><a name="[358]"></a>tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, pooling_common.o(.text._ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::MaxPool(tflite::PoolParams const&, tflite::RuntimeShape const&, float const*, tflite::RuntimeShape const&, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2f3]"></a>tflite::Register_DEQUANTIZE()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, dequantize.o(.text._ZN6tflite19Register_DEQUANTIZEEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[3a3]"></a>tflite::ScopedMicroProfiler::~ScopedMicroProfiler()</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite19ScopedMicroProfilerD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
</UL>

<P><STRONG><a name="[494]"></a>tflite::ScopedMicroProfiler::~ScopedMicroProfiler__sub_object()</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite19ScopedMicroProfilerD2Ev), UNUSED)

<P><STRONG><a name="[399]"></a>tflite::CalculateInputRadius(int, int, int)</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, quantization_util.o(.text._ZN6tflite20CalculateInputRadiusEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateInputRadius(int, int, int) &rArr; floor &rArr; __hardfp_floor &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
</UL>

<P><STRONG><a name="[39c]"></a>tflite::NumSubgraphOperators(tflite::Model const*, int)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, flatbuffer_utils.o(.text._ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi))
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InitSubgraphs()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetSubgraphs()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::FreeSubgraphs()
</UL>

<P><STRONG><a name="[371]"></a>tflite::NumSubgraphOperators(tflite::SubGraph const*)</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, flatbuffer_utils.o(.text._ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>

<P><STRONG><a name="[152]"></a>tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 150 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ConvertPadding(tflite::Padding)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[2f0]"></a>tflite::Register_MAX_POOL_2D()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[39d]"></a>tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[36d]"></a>tflite::AllocationInfoBuilder::FreeAllocationInfo()</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[367]"></a>tflite::AllocationInfoBuilder::CreateAllocationInfo(int)</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::CreateAllocationInfo(int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubGraph::tensors() const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[36b]"></a>tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 424 bytes, Stack size unknown bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::SubGraph const*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[368]"></a>tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(long const**)</STRONG> (Thumb, 224 bytes, Stack size unknown bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(long const**) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[369]"></a>tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*) &rArr; tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubGraph::tensors() const
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Tensor::is_variable() const
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
</UL>

<P><STRONG><a name="[39e]"></a>tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, micro_allocation_info.o(.text._ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[16e]"></a>tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1364 bytes, Stack size unknown bytes, quantize_common.o(.text._ZN6tflite21EvalQuantizeReferenceEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MultiplyByQuantizedMultiplier(long, long, int)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ElementCount(TfLiteIntArray const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
</UL>
<P><STRONG><a name="[38c]"></a>tflite::GetMicroErrorReporter()</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, micro_error_reporter.o(.text._ZN6tflite21GetMicroErrorReporterEv))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
</UL>

<P><STRONG><a name="[162]"></a>tflite::MicroContextGetTensor(TfLiteContext const*, int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[1bb]"></a>tflite::MicroInterpreterGraph::NumSubgraphs()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv))
<BR><BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1c0]"></a>tflite::MicroInterpreterGraph::FreeSubgraphs()</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1bd]"></a>tflite::MicroInterpreterGraph::InitSubgraphs()</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1b6]"></a>tflite::MicroInterpreterGraph::InvokeSubgraph(int)</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterGraph::InvokeSubgraph(int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ScopedMicroProfiler::~ScopedMicroProfiler()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::OpNameFromRegistration(TFLMRegistration const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Invoke()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1bf]"></a>tflite::MicroInterpreterGraph::ResetSubgraphs()</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1b8]"></a>tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1be]"></a>tflite::MicroInterpreterGraph::PrepareSubgraphs()</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterGraph::PrepareSubgraphs() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::FinishPrepareNodeAllocations(int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::NumSubgraphOperators(tflite::Model const*, int)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::OpNameFromRegistration(TFLMRegistration const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1ba]"></a>tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1b7]"></a>tflite::MicroInterpreterGraph::NumSubgraphInputs(int)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1b9]"></a>tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1bc]"></a>tflite::MicroInterpreterGraph::GetResourceVariables()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1c1]"></a>tflite::MicroInterpreterGraph::ResetVariableTensors()</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterGraph::ResetVariableTensors() &rArr; tflite::MicroResourceVariables::ResetAll() &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroResourceVariables::ResetAll()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[37b]"></a>tflite::MicroInterpreterGraph::SetSubgraphAllocations(tflite::SubgraphAllocations*)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[389]"></a>tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphC2EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE))
<BR><BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)
</UL>

<P><STRONG><a name="[495]"></a>tflite::MicroInterpreterGraph::MicroInterpreterGraph__sub_object(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphC2EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE), UNUSED)

<P><STRONG><a name="[1b5]"></a>tflite::MicroInterpreterGraph::~MicroInterpreterGraph__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[1b4]"></a>tflite::MicroInterpreterGraph::~MicroInterpreterGraph()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD0Ev))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_graph.o(.rodata._ZTVN6tflite21MicroInterpreterGraphE)
</UL>
<P><STRONG><a name="[496]"></a>tflite::MicroInterpreterGraph::~MicroInterpreterGraph__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite21MicroInterpreterGraphD0Ev), UNUSED)

<P><STRONG><a name="[15e]"></a>tflite::reference_integer_ops::AddFunc(signed char, signed char, tflite::ArithmeticParams const&)</STRONG> (Thumb, 484 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE))
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.constprop.0)
</UL>
<P><STRONG><a name="[3a5]"></a>tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, memory_helpers.o(.text._ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_))
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteTypeSizeOf(TfLiteType, unsigned int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[379]"></a>tflite::CalculateOpDataPooling(TfLiteContext const*, TfLitePoolParams const*, TfLiteTensor const*, TfLiteTensor const*, tflite::OpDataPooling*)</STRONG> (Thumb, 170 bytes, Stack size unknown bytes, pooling_common.o(.text._ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[35f]"></a>tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, softmax_common.o(.text._ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) &rArr; tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0) &rArr; tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*) &rArr; tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::InitializeLutForInt16(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, tflite::SoftmaxParams*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2e9]"></a>tflite::MicroMutableOpResolver&lang;12u&rang;::AddBuiltin(tflite::BuiltinOperator, TFLMRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**))</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, model_ops_npu.o(.text._ZN6tflite22MicroMutableOpResolverILj12EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tflite::MicroMutableOpResolver&lang;12u&rang;::AddBuiltin(tflite::BuiltinOperator, TFLMRegistration const&, TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[1c5]"></a>tflite::MicroMutableOpResolver&lang;12u&rang;::~MicroMutableOpResolver__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model_ops_npu.o(.text._ZN6tflite22MicroMutableOpResolverILj12EED0Ev))
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
</UL>
<P><STRONG><a name="[3a4]"></a>tflite::MicroResourceVariables::ResetAll()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, micro_resource_variable.o(.text._ZN6tflite22MicroResourceVariables8ResetAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::MicroResourceVariables::ResetAll() &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
</UL>

<P><STRONG><a name="[2ea]"></a>tflite::Register_CONCATENATION()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite22Register_CONCATENATIONEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[2f5]"></a>tflite::Register_NEUTRON_GRAPH()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tflite::Register_NEUTRON_GRAPH() &rArr; __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[385]"></a>tflite::EnumNameBuiltinOperator(tflite::BuiltinOperator)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[2f4]"></a>tflite::GetString_NEUTRON_GRAPH()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, neutron.o(.text._ZN6tflite23GetString_NEUTRON_GRAPHEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[1cf]"></a>tflite::MicroInterpreterContext::GetEvalTensor(int)</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext13GetEvalTensorEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1ca]"></a>tflite::MicroInterpreterContext::GetScratchBuffer(int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16GetScratchBufferEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1d1]"></a>tflite::MicroInterpreterContext::external_context()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext16external_contextEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1cd]"></a>tflite::MicroInterpreterContext::AllocateTempBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[37d]"></a>tflite::MicroInterpreterContext::SetInterpreterState(tflite::MicroInterpreterContext::InterpreterState)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::Init(tflite::MicroProfilerInterface*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[1ce]"></a>tflite::MicroInterpreterContext::DeallocateTempBuffer(unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1d0]"></a>tflite::MicroInterpreterContext::set_external_context(void*)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext20set_external_contextEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterContext::set_external_context(void*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[37e]"></a>tflite::MicroInterpreterContext::SetScratchBufferHandles(tflite::ScratchBufferHandle*)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[1c8]"></a>tflite::MicroInterpreterContext::AllocatePersistentBuffer(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1cb]"></a>tflite::MicroInterpreterContext::AllocateTempTfLiteTensor(int)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1cc]"></a>tflite::MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor*)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1c9]"></a>tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*)</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroInterpreterContext::RequestScratchBufferInArena(unsigned int, int*) &rArr; tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::RequestScratchBufferInArena(unsigned int, int, int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1d2]"></a>tflite::MicroInterpreterContext::graph()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContext5graphEv))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[38a]"></a>tflite::MicroInterpreterContext::MicroInterpreterContext(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextC2EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::MicroInterpreter(tflite::Model const*, tflite::MicroOpResolver const&, unsigned char*, unsigned int, tflite::MicroResourceVariables*, tflite::MicroProfilerInterface*, bool)
</UL>

<P><STRONG><a name="[497]"></a>tflite::MicroInterpreterContext::MicroInterpreterContext__sub_object(tflite::MicroAllocator*, tflite::Model const*, tflite::MicroInterpreterGraph*)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextC2EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE), UNUSED)

<P><STRONG><a name="[1c7]"></a>tflite::MicroInterpreterContext::~MicroInterpreterContext__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[1c6]"></a>tflite::MicroInterpreterContext::~MicroInterpreterContext()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD0Ev))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::~MicroInterpreter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter_context.o(.rodata._ZTVN6tflite23MicroInterpreterContextE)
</UL>
<P><STRONG><a name="[498]"></a>tflite::MicroInterpreterContext::~MicroInterpreterContext__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_interpreter_context.o(.text._ZN6tflite23MicroInterpreterContextD0Ev), UNUSED)

<P><STRONG><a name="[387]"></a>tflite::CallBuiltinParseFunction(TfLiteStatus (*)(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**), tflite::Operator const*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, flatbuffer_conversions_bridge.o(.text._ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_))
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetMicroErrorReporter()
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[34d]"></a>tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, depthwise_conv_common.o(.text._ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE))
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RuntimePaddingType(TfLitePadding)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[16f]"></a>tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 512 bytes, Stack size unknown bytes, quantize_common.o(.text._ZN6tflite24PrepareQuantizeReferenceEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
</UL>
<P><STRONG><a name="[3a8]"></a>tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*)</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, quantization_util.o(.text._ZN6tflite24PreprocessSoftmaxScalingEddiPlPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*) &rArr; tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
</UL>

<P><STRONG><a name="[383]"></a>tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**)</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, micro_op_resolver.o(.text._ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::GetRegistrationFromOpCode(tflite::OperatorCode const*, tflite::MicroOpResolver const&, TFLMRegistration const**) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetBuiltinCode(tflite::OperatorCode const*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
</UL>

<P><STRONG><a name="[163]"></a>tflite::MicroContextGetEvalTensor(TfLiteContext const*, int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[161]"></a>tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...)</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, micro_context.o(.text._ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::MicroContextReportOpError(TfLiteContext*, char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[150]"></a>tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char flatbuffers::Table::GetField&lang;unsigned char&rang;(unsigned short, unsigned char) const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[2ef]"></a>tflite::Register_DEPTHWISE_CONV_2D()</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[1d5]"></a>tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int)</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocateTemp(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1da]"></a>tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::ResizeBuffer(unsigned char*, unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1d6]"></a>tflite::SingleArenaBufferAllocator::DeallocateTemp(unsigned char*)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1d7]"></a>tflite::SingleArenaBufferAllocator::IsAllTempDeallocated()</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::IsAllTempDeallocated() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1d8]"></a>tflite::SingleArenaBufferAllocator::ResetTempAllocations()</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::ResetTempAllocations() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1d9]"></a>tflite::SingleArenaBufferAllocator::AllocateResizableBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj))
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1e0]"></a>tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1db]"></a>tflite::SingleArenaBufferAllocator::DeallocateResizableBuffer(unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1dd]"></a>tflite::SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(unsigned int, unsigned int)</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj))
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[375]"></a>tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator6CreateEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int) &rArr; tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator(unsigned char*, unsigned int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::Create(unsigned char*, unsigned int, tflite::MemoryPlannerType)
</UL>

<P><STRONG><a name="[3ae]"></a>tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator(unsigned char*, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorC2EPhS1_))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[499]"></a>tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator__sub_object(unsigned char*, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorC2EPhS1_), UNUSED)

<P><STRONG><a name="[3ad]"></a>tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator(unsigned char*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorC2EPhj))
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SingleArenaBufferAllocator::Create(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[49a]"></a>tflite::SingleArenaBufferAllocator::SingleArenaBufferAllocator__sub_object(unsigned char*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorC2EPhj), UNUSED)

<P><STRONG><a name="[1d4]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1d3]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[49b]"></a>tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocatorD0Ev), UNUSED)

<P><STRONG><a name="[362]"></a>tflite::TfLiteEvalTensorByteLength(TfLiteEvalTensor const*, unsigned int*)</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, memory_helpers.o(.text._ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj))
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::TfLiteTypeSizeOf(TfLiteType, unsigned int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
</UL>

<P><STRONG><a name="[35d]"></a>tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)</STRONG> (Thumb, 644 bytes, Stack size unknown bytes, depthwise_conv_common.o(.text._ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[167]"></a>tflite::MicroContextGetScratchBuffer(TfLiteContext*, int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[338]"></a>bool tflite::ReduceDimensionsForBroadcast&lang;6&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, unsigned int*, unsigned int*, unsigned int*)</STRONG> (Thumb, 630 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite28ReduceDimensionsForBroadcastILi6EEEbRKNS_12RuntimeShapeES3_PjS4_S4_))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[3a1]"></a>tflite::MultiplyByQuantizedMultiplier(long, long, int)</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, common.o(.text._ZN6tflite29MultiplyByQuantizedMultiplierElli))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::ConvPerChannel&lang;long&rang;(tflite::ConvParams const&, long const*, long const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long const*, tflite::RuntimeShape const&, short*) (.isra.0)
</UL>

<P><STRONG><a name="[165]"></a>tflite::MicroContextGetExternalContext(TfLiteContext*, TfLiteExternalContextType)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[3af]"></a>tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
</UL>

<P><STRONG><a name="[3b0]"></a>tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*) &rArr; tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
</UL>

<P><STRONG><a name="[3aa]"></a>tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, quantization_util.o(.text._ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*)
</UL>

<P><STRONG><a name="[2ed]"></a>tflite::Register_RESIZE_NEAREST_NEIGHBOR()</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, resize_nearest_neighbor.o(.text._ZN6tflite32Register_RESIZE_NEAREST_NEIGHBOREv))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[319]"></a>tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, long*, long*)</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_))
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Quantize(TfLiteContext*, float, long, float, long&)
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3bb]"></a>tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;float&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, flatbuffer_utils.o(.text._ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[386]"></a>tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;long&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, flatbuffer_utils.o(.text._ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[318]"></a>tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*)</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, quantization_util.o(.text._ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[166]"></a>tflite::MicroContextAllocatePersistentBuffer(TfLiteContext*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[393]"></a>tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)</STRONG> (Thumb, 600 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, long*, long*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
</UL>

<P><STRONG><a name="[164]"></a>tflite::MicroContextRequestScratchBufferInArena(TfLiteContext*, unsigned int, int*)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi))
<BR>[Address Reference Count : 1]<UL><LI> micro_interpreter.o(.text._ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE)
</UL>
<P><STRONG><a name="[322]"></a>tflite::micro::RegisterOp(void* (*)(TfLiteContext*, char const*, unsigned int), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), TfLiteStatus (*)(TfLiteContext*, TfLiteNode*), void (*)(TfLiteContext*, void*), void (*)(TfLiteContext*, void*))</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_NEUTRON_GRAPH()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEQUANTIZE()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SOFTMAX()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_ADD()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_MAX_POOL_2D()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_DEPTHWISE_CONV_2D()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CONV_2D()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_RESIZE_NEAREST_NEIGHBOR()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_QUANTIZE()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_SLICE()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_CONCATENATION()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_PAD()
</UL>

<P><STRONG><a name="[324]"></a>tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[325]"></a>tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[328]"></a>tflite::micro::GetTensorShape(TfLiteEvalTensor const*)</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0.isra.0)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[37a]"></a>tflite::micro::RuntimePaddingType(TfLitePadding)</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvParamsQuantized(TfLiteConvParams const&, tflite::OpDataConv const&)
</UL>

<P><STRONG><a name="[349]"></a>tflite::micro::MakeUnpackedInt4Tensor(TfLiteContext*, int, TfLiteEvalTensor const*)</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tflite::micro::MakeUnpackedInt4Tensor(TfLiteContext*, int, TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::tensor_utils::UnpackDenseInt4IntoInt8(signed char const*, int, signed char*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[158]"></a>tflite::EvalAdd(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::EvalAdd(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12Register_ADDEv)
</UL>
<P><STRONG><a name="[15a]"></a>tflite::InitAdd(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite7InitAddEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> add.o(.text._ZN6tflite12Register_ADDEv)
</UL>
<P><STRONG><a name="[154]"></a>tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char flatbuffers::Table::GetField&lang;unsigned char&rang;(unsigned short, unsigned char) const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[14c]"></a>tflite::ParsePad(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[3b6]"></a>tflite::internal::GetFlatbufferTensorBuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*)</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[373]"></a>tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;float&rang; const*)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteIntArrayGetSizeInBytes
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;long&rang; const*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::BytesRequiredForTensor(tflite::Tensor const&, unsigned int*, unsigned int*)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::GetFlatbufferTensorBuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Tensor::is_variable() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Tensor::type() const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizationParameters::zero_point() const
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizationParameters::scale() const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)
</UL>

<P><STRONG><a name="[36f]"></a>tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor))
<BR><BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::FlatBufferVectorToTfLiteTypeArray(flatbuffers::Vector&lang;long&rang; const*)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvertTensorType(tflite::TensorType, TfLiteType*)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::GetFlatbufferTensorBuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Tensor::type() const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[153]"></a>tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::ConvertPadding(tflite::Padding)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.text._Z20MODEL_GetOpsResolverv)
</UL>
<P><STRONG><a name="[303]"></a>flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::ResetVariableTensors()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::GetOfflinePlannedOffsets(long const**)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::GetFlatbufferTensorBuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::SubGraph::tensors() const
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Tensor::is_variable() const
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Tensor::type() const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizationParameters::zero_point() const
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizationParameters::scale() const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::ValidateSubgraph(tflite::SubGraph const*, TfLiteEvalTensor*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float flatbuffers::Table::GetField&lang;float&rang;(unsigned short, float) const
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char flatbuffers::Table::GetField&lang;unsigned char&rang;(unsigned short, unsigned char) const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options() const
</UL>

<P><STRONG><a name="[31c]"></a>signed char flatbuffers::Table::GetField&lang;signed char&rang;(unsigned short, signed char) const</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZNK11flatbuffers5Table8GetFieldIaEET_tS2_))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
</UL>

<P><STRONG><a name="[321]"></a>float flatbuffers::Table::GetField&lang;float&rang;(unsigned short, float) const</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZNK11flatbuffers5Table8GetFieldIfEET_tS2_))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
</UL>

<P><STRONG><a name="[3ab]"></a>unsigned char flatbuffers::Table::GetField&lang;unsigned char&rang;(unsigned short, unsigned char) const</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZNK11flatbuffers5Table8GetFieldIhEET_tS2_))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Operator::builtin_options_type() const
</UL>

<P><STRONG><a name="[31e]"></a>long flatbuffers::Table::GetField&lang;long&rang;(unsigned short, long) const</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZNK11flatbuffers5Table8GetFieldIlEET_tS2_))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[2ca]"></a>tflite::MicroAllocator::used_bytes() const</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK6tflite14MicroAllocator10used_bytesEv))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetArenaUsedBytes
</UL>

<P><STRONG><a name="[1a8]"></a>tflite::GreedyMemoryPlanner::preserves_all_tensors() const</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv))
<BR>[Address Reference Count : 1]<UL><LI> greedy_memory_planner.o(.rodata._ZTVN6tflite19GreedyMemoryPlannerE)
</UL>
<P><STRONG><a name="[397]"></a>tflite::GreedyMemoryPlanner::DoesEntryOverlapInTime(tflite::GreedyMemoryPlanner::ListEntry const*, int, int) const</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, greedy_memory_planner.o(.text._ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(tflite::GreedyMemoryPlanner::ListEntry const*, int, int)
</UL>

<P><STRONG><a name="[1b2]"></a>tflite::LinearMemoryPlanner::preserves_all_tensors() const</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, linear_memory_planner.o(.text._ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv))
<BR>[Address Reference Count : 1]<UL><LI> linear_memory_planner.o(.rodata._ZTVN6tflite19LinearMemoryPlannerE)
</UL>
<P><STRONG><a name="[1c4]"></a>tflite::MicroMutableOpResolver&lang;12u&rang;::GetOpDataParser(tflite::BuiltinOperator) const</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, model_ops_npu.o(.text._ZNK6tflite22MicroMutableOpResolverILj12EE15GetOpDataParserENS_15BuiltinOperatorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tflite::MicroMutableOpResolver&lang;12u&rang;::GetOpDataParser(tflite::BuiltinOperator) const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
</UL>
<P><STRONG><a name="[1c2]"></a>tflite::MicroMutableOpResolver&lang;12u&rang;::FindOp(tflite::BuiltinOperator) const</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, model_ops_npu.o(.text._ZNK6tflite22MicroMutableOpResolverILj12EE6FindOpENS_15BuiltinOperatorE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tflite::MicroMutableOpResolver&lang;12u&rang;::FindOp(tflite::BuiltinOperator) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
</UL>
<P><STRONG><a name="[1c3]"></a>tflite::MicroMutableOpResolver&lang;12u&rang;::FindOp(char const*) const</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, model_ops_npu.o(.text._ZNK6tflite22MicroMutableOpResolverILj12EE6FindOpEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tflite::MicroMutableOpResolver&lang;12u&rang;::FindOp(char const*) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_ops_npu.o(.rodata._ZTVN6tflite22MicroMutableOpResolverILj12EEE)
</UL>
<P><STRONG><a name="[3b9]"></a>tflite::QuantizationParameters::zero_point() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK6tflite22QuantizationParameters10zero_pointEv))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[3b8]"></a>tflite::QuantizationParameters::scale() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK6tflite22QuantizationParameters5scaleEv))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[1df]"></a>tflite::SingleArenaBufferAllocator::GetAvailableMemory(unsigned int) const</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj))
<BR><BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerDown(unsigned char*, unsigned int)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AlignPointerUp(unsigned char*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1e1]"></a>tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1dc]"></a>tflite::SingleArenaBufferAllocator::GetOverlayMemoryAddress() const</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1de]"></a>tflite::SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[365]"></a>tflite::Model::subgraphs() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK6tflite5Model9subgraphsEv))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::NumSubgraphs()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::MicroInterpreterGraph(TfLiteContext*, tflite::Model const*, tflite::MicroAllocator*, tflite::MicroResourceVariables*)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::outputs_size() const (.isra.0)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::inputs_size() const (.isra.0)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkAllocationLifetimes(int, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::CommitStaticMemoryPlan(tflite::Model const*, tflite::SubgraphAllocations*, tflite::ScratchBufferHandle*)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::StartModelAllocation(tflite::Model const*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateNodeAndRegistrations(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::NumSubgraphOutputs(int)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::NumSubgraphInputs(int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::GetSubgraphOutput(int, int)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::GetSubgraphInput(int, int)
</UL>

<P><STRONG><a name="[361]"></a>tflite::Tensor::is_variable() const</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK6tflite6Tensor11is_variableEv))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*)
</UL>

<P><STRONG><a name="[3b7]"></a>tflite::Tensor::type() const</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK6tflite6Tensor4typeEv))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteEvalTensorFromFlatbuffer(tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteEvalTensor*)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::internal::InitializeTfLiteTensorFromFlatbuffer(tflite::IPersistentBufferAllocator*, tflite::INonPersistentBufferAllocator*, bool, tflite::Tensor const&, flatbuffers::Vector&lang;flatbuffers::Offset&lang;tflite::Buffer&rang;&rang; const*, TfLiteTensor*)
</UL>

<P><STRONG><a name="[31b]"></a>tflite::Operator::builtin_options() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZNK6tflite8Operator15builtin_optionsEv))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[31a]"></a>tflite::Operator::builtin_options_type() const</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZNK6tflite8Operator20builtin_options_typeEv))
<BR><BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char flatbuffers::Table::GetField&lang;unsigned char&rang;(unsigned short, unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseSoftmax(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseAdd(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseResizeNearestNeighbor(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConcatenation(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(tflite::Operator const*, tflite::internal::ScratchBufferRequest*, tflite::ScratchBufferHandle*, tflite::SubgraphAllocations*)
</UL>

<P><STRONG><a name="[360]"></a>tflite::SubGraph::tensors() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZNK6tflite8SubGraph7tensorsEv))
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Table::GetOptionalFieldOffset(unsigned short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::InitializeAllocationInfo(long const*, tflite::SubgraphAllocations*)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::AllocationInfoBuilder::CreateAllocationInfo(int)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateTfLiteEvalTensors(tflite::Model const*, tflite::SubgraphAllocations*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(tflite::Model const*, TfLiteTensor*, int, int, bool)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroAllocator::AllocateVariables(tflite::SubGraph const*, TfLiteEvalTensor*, long const*)
</UL>

<P><STRONG><a name="[14b]"></a>std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;::~vector__sub_object[abi:v16000]()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, zf_model_process.o(.text._ZNSt3__26vectorIN4yolo16object_detection15DetectionResultENS_9allocatorIS3_EEED2B6v16000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;::~vector__sub_object[abi:v16000]() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_model_process.o(.text._GLOBAL__sub_I_zf_model_process.cpp)
</UL>
<P><STRONG><a name="[30f]"></a>std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*)</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, yolo_post_processing.o(.text._ZNSt3__26vectorIN4yolo16object_detection6BranchENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)
</UL>

<P><STRONG><a name="[3bf]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[30a]"></a>std::__throw_bad_array_new_length[abi:v16000]()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, yolo_post_processing.o(.text._ZSt28__throw_bad_array_new_lengthB6v16000v))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__throw_bad_array_new_length[abi:v16000]() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
</UL>

<P><STRONG><a name="[1e4]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj))
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;.LTHUNK2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1e3]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1e2]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::~SingleArenaBufferAllocator()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[1e5]"></a>non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;.LTHUNK3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> single_arena_buffer_allocator.o(.rodata._ZTVN6tflite26SingleArenaBufferAllocatorE)
</UL>
<P><STRONG><a name="[309]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;::~vector__sub_object[abi:v16000]()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::~DetectorPostProcess__deallocating()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::~DetectorPostProcess__sub_object()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*)
</UL>

<P><STRONG><a name="[307]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;__is_cpp17_forward_iterator&lang;yolo::object_detection::Branch*&rang;::value && is_constructible&lang;yolo::object_detection::Branch, std::__2::iterator_traits&lang;yolo::object_detection::Branch*&rang;::reference&rang;::value, void&rang;::type std::__2::vector&lang;yolo::object_detection::Branch, std::__2::allocator&lang;yolo::object_detection::Branch&rang;&rang;::assign&lang;yolo::object_detection::Branch*&rang;(yolo::object_detection::Branch*, yolo::object_detection::Branch*)
</UL>

<P><STRONG><a name="[29a]"></a>__aeabi_assert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferCreateHandleEDMA
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_CreateHandle
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_read_register
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_write_register
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_Init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_GetDefaultConfig
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetActiveModeCoreLDORegulatorConfig
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetSRAMOperateVoltage
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetActiveModeDCDCRegulatorConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOutputSize
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOutputTensorData
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetInputTensorData
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMALite
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferPrepareEDMALite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_LpspiMasterCallback
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_CheckTransferArgument
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterSetDelayTimes
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetInstance
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_Deinit
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_FLEXCOMM_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_StartTransfer
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetCallback
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_EnableChannelInterrupts
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdSetTransferConfig
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ConfigChannelSoftwareTCD
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TcdReset
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ResetChannel
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_InitChannel
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>

<P><STRONG><a name="[2e2]"></a>__wfe</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, NeutronRuntime.c.o(.text.__wfe))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
</UL>

<P><STRONG><a name="[3c0]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[3c1]"></a>addTraceToBuffer</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, NeutronFirmwareTrace.c.o(.text.addTraceToBuffer))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceEvent
</UL>

<P><STRONG><a name="[3c3]"></a>arm_convolve_1_x_n_s8</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, arm_convolve_1_x_n_s8.o(.text.arm_convolve_1_x_n_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = arm_convolve_1_x_n_s8 &rArr; arm_convolve_s8 &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8_get_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
</UL>

<P><STRONG><a name="[3c4]"></a>arm_convolve_1_x_n_s8_get_buffer_size</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, arm_convolve_get_buffer_sizes_s8.o(.text.arm_convolve_1_x_n_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8
</UL>

<P><STRONG><a name="[3c6]"></a>arm_convolve_1x1_s8</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, arm_convolve_1x1_s8.o(.text.arm_convolve_1x1_s8))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_nt_t_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
</UL>

<P><STRONG><a name="[3c8]"></a>arm_convolve_1x1_s8_fast</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, arm_convolve_1x1_s8_fast.o(.text.arm_convolve_1x1_s8_fast))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_nt_t_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
</UL>

<P><STRONG><a name="[3c9]"></a>arm_convolve_fast_s16</STRONG> (Thumb, 996 bytes, Stack size unknown bytes, arm_convolve_fast_s16.o(.text.arm_convolve_fast_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = arm_convolve_fast_s16 &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_s16
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8_get_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16
</UL>

<P><STRONG><a name="[3ce]"></a>arm_convolve_s16</STRONG> (Thumb, 808 bytes, Stack size unknown bytes, arm_convolve_s16.o(.text.arm_convolve_s16))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16
</UL>

<P><STRONG><a name="[3c5]"></a>arm_convolve_s8</STRONG> (Thumb, 958 bytes, Stack size unknown bytes, arm_convolve_s8.o(.text.arm_convolve_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = arm_convolve_s8 &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_s8_s16
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_s8_to_s16_unordered_with_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8
</UL>

<P><STRONG><a name="[3cb]"></a>arm_convolve_s8_get_buffer_size</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, arm_convolve_get_buffer_sizes_s8.o(.text.arm_convolve_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_fast_s16
</UL>

<P><STRONG><a name="[344]"></a>arm_convolve_wrapper_s16</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, arm_convolve_wrapper_s16.o(.text.arm_convolve_wrapper_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = arm_convolve_wrapper_s16 &rArr; arm_convolve_fast_s16 &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_fast_s16
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s16
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[35c]"></a>arm_convolve_wrapper_s16_get_buffer_size</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, arm_convolve_get_buffer_sizes_s16.o(.text.arm_convolve_wrapper_s16_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[340]"></a>arm_convolve_wrapper_s8</STRONG> (Thumb, 230 bytes, Stack size unknown bytes, arm_convolve_wrapper_s8.o(.text.arm_convolve_wrapper_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = arm_convolve_wrapper_s8 &rArr; arm_convolve_1_x_n_s8 &rArr; arm_convolve_s8 &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1_x_n_s8
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[35b]"></a>arm_convolve_wrapper_s8_get_buffer_size</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, arm_convolve_get_buffer_sizes_s8.o(.text.arm_convolve_wrapper_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3d3]"></a>arm_depthwise_conv_3x3_s8</STRONG> (Thumb, 1330 bytes, Stack size unknown bytes, arm_depthwise_conv_3x3_s8.o(.text.arm_depthwise_conv_3x3_s8))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8
</UL>

<P><STRONG><a name="[346]"></a>arm_depthwise_conv_s16</STRONG> (Thumb, 888 bytes, Stack size unknown bytes, arm_depthwise_conv_s16.o(.text.arm_depthwise_conv_s16))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[3d2]"></a>arm_depthwise_conv_s8</STRONG> (Thumb, 1846 bytes, Stack size unknown bytes, arm_depthwise_conv_s8.o(.text.arm_depthwise_conv_s8))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8
</UL>

<P><STRONG><a name="[3cf]"></a>arm_depthwise_conv_s8_opt</STRONG> (Thumb, 1614 bytes, Stack size unknown bytes, arm_depthwise_conv_s8_opt.o(.text.arm_depthwise_conv_s8_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = arm_depthwise_conv_s8_opt &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_with_offset
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt_get_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8
</UL>

<P><STRONG><a name="[3d1]"></a>arm_depthwise_conv_s8_opt_get_buffer_size</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, arm_depthwise_conv_get_buffer_sizes_s8.o(.text.arm_depthwise_conv_s8_opt_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt
</UL>

<P><STRONG><a name="[342]"></a>arm_depthwise_conv_wrapper_s8</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, arm_depthwise_conv_wrapper_s8.o(.text.arm_depthwise_conv_wrapper_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = arm_depthwise_conv_wrapper_s8 &rArr; arm_depthwise_conv_s8_opt &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_3x3_s8
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[35e]"></a>arm_depthwise_conv_wrapper_s8_get_buffer_size</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, arm_depthwise_conv_get_buffer_sizes_s8.o(.text.arm_depthwise_conv_wrapper_s8_get_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33c]"></a>arm_elementwise_add_s16</STRONG> (Thumb, 958 bytes, Stack size unknown bytes, arm_elementwise_add_s16.o(.text.arm_elementwise_add_s16))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[339]"></a>arm_elementwise_add_s8</STRONG> (Thumb, 1890 bytes, Stack size unknown bytes, arm_elementwise_add_s8.o(.text.arm_elementwise_add_s8))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
</UL>

<P><STRONG><a name="[334]"></a>arm_max_pool_s16</STRONG> (Thumb, 636 bytes, Stack size unknown bytes, arm_max_pool_s16.o(.text.arm_max_pool_s16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = arm_max_pool_s16 &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0.isra.0)
</UL>

<P><STRONG><a name="[335]"></a>arm_max_pool_s8</STRONG> (Thumb, 730 bytes, Stack size unknown bytes, arm_max_pool_s8.o(.text.arm_max_pool_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = arm_max_pool_s8 &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0.isra.0)
</UL>

<P><STRONG><a name="[3ca]"></a>arm_nn_mat_mult_kernel_s16</STRONG> (Thumb, 1730 bytes, Stack size unknown bytes, arm_nn_mat_mul_kernel_s16.o(.text.arm_nn_mat_mult_kernel_s16))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_fast_s16
</UL>

<P><STRONG><a name="[3cd]"></a>arm_nn_mat_mult_kernel_s8_s16</STRONG> (Thumb, 1188 bytes, Stack size unknown bytes, arm_nn_mat_mult_kernel_s8_s16.o(.text.arm_nn_mat_mult_kernel_s8_s16))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
</UL>

<P><STRONG><a name="[3c7]"></a>arm_nn_mat_mult_nt_t_s8</STRONG> (Thumb, 2304 bytes, Stack size unknown bytes, arm_nn_mat_mult_nt_t_s8.o(.text.arm_nn_mat_mult_nt_t_s8))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8_fast
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_s8
</UL>

<P><STRONG><a name="[3d4]"></a>arm_nn_softmax_common_s8</STRONG> (Thumb, 4216 bytes, Stack size unknown bytes, arm_nn_softmax_common_s8.o(.text.arm_nn_softmax_common_s8))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s8_s16
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s8
</UL>

<P><STRONG><a name="[3d0]"></a>arm_q7_to_q15_with_offset</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, arm_q7_to_q15_with_offset.o(.text.arm_q7_to_q15_with_offset))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s8_opt
</UL>

<P><STRONG><a name="[3cc]"></a>arm_s8_to_s16_unordered_with_offset</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, arm_s8_to_s16_unordered_with_offset.o(.text.arm_s8_to_s16_unordered_with_offset))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_s8
</UL>

<P><STRONG><a name="[327]"></a>arm_softmax_s16</STRONG> (Thumb, 492 bytes, Stack size unknown bytes, arm_softmax_s16.o(.text.arm_softmax_s16))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32c]"></a>arm_softmax_s8</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, arm_softmax_s8.o(.text.arm_softmax_s8))
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_softmax_common_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32b]"></a>arm_softmax_s8_s16</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, arm_softmax_s8_s16.o(.text.arm_softmax_s8_s16))
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_softmax_common_s8
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[3d5]"></a>debug_uart_init</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, zf_board_init.o(.text.debug_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = debug_uart_init &rArr; LPUART_Init &rArr; LP_FLEXCOMM_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetLPFlexCommClkFreq
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_board_init
</UL>

<P><STRONG><a name="[3d7]"></a>driverAlloc</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, NeutronDriverResources.c.o(.text.driverAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = driverAlloc &rArr; memalign &rArr; posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memalign
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronModelPrepare
</UL>

<P><STRONG><a name="[3d9]"></a>driverFree</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriverResources.c.o(.text.driverFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = driverFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronModelUnprepare
</UL>

<P><STRONG><a name="[2dd]"></a>ezh_camera_display_callback</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, zf_driver_ezh.o(.text.ezh_camera_display_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ezh_camera_display_callback &rArr; ezh_copy_slice_to_model_input &rArr; rgb565stridedtorgb888(unsigned short const*, int, int, int, int, int, unsigned char*, int, unsigned char) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_copy_slice_to_model_input
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_Boot
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLU_DriverIRQHandler
</UL>

<P><STRONG><a name="[3da]"></a>ezh_copy_slice_to_model_input</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, zf_model_process.o(.text.ezh_copy_slice_to_model_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ezh_copy_slice_to_model_input &rArr; rgb565stridedtorgb888(unsigned short const*, int, int, int, int, int, unsigned char*, int, unsigned char) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb565stridedtorgb888(unsigned short const*, int, int, int, int, int, unsigned char*, int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_camera_display_callback
</UL>

<P><STRONG><a name="[3dc]"></a>ezh_start</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, zf_driver_ezh.o(.text.ezh_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ezh_start &rArr; SMARTDMA_Init &rArr; RESET_PeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_Boot
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_InstallCallback
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTDMA_Init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Deinit
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
</UL>

<P><STRONG><a name="[3e0]"></a>float_to_str</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, zf_board_init.o(.text.float_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = float_to_str &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_user_printf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_debug_printf
</UL>

<P><STRONG><a name="[3c2]"></a>getTime</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.getTime))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTraceToBuffer
</UL>

<P><STRONG><a name="[3ee]"></a>gpio_get_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zf_driver_gpio.o(.text.gpio_get_level))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e1]"></a>gpio_init</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, zf_driver_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gpio_init &rArr; GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_board_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e5]"></a>gpio_set_level</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, zf_driver_gpio.o(.text.gpio_set_level))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_set_region
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_stop
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_start
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[2af]"></a>gpio_toggle_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zf_driver_gpio.o(.text.gpio_toggle_level))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3e7]"></a>int_to_str</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, zf_board_init.o(.text.int_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_int
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_user_printf
</UL>

<P><STRONG><a name="[3e2]"></a>ips200_draw_line</STRONG> (Thumb, 528 bytes, Stack size 64 bytes, zf_device_ips200.o(.text.ips200_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ips200_draw_line &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMA
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e4]"></a>ips200_init</STRONG> (Thumb, 3672 bytes, Stack size 760 bytes, zf_device_ips200.o(.text.ips200_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = ips200_init &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferCreateHandleEDMA
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_CreateHandle
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMA
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_set_region
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetLPFlexCommClkFreq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e6]"></a>ips200_show_char</STRONG> (Thumb, 178 bytes, Stack size 272 bytes, zf_device_ips200.o(.text.ips200_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ips200_show_char &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMA
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_int
</UL>

<P><STRONG><a name="[2ff]"></a>ips200_show_int</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, zf_device_ips200.o(.text.ips200_show_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = ips200_show_int &rArr; ips200_show_char &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_char
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e8]"></a>ips200_show_scc8660</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, zf_device_ips200.o(.text.ips200_show_scc8660))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ips200_show_scc8660 &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMA
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
</UL>

<P><STRONG><a name="[21c]"></a>main</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = main &rArr; ips200_init &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_draw_line
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_int
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_set_brightness
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_user_printf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_debug_printf
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3d8]"></a>memalign</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, neutron.o(.text.memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memalign &rArr; posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverAlloc
</UL>

<P><STRONG><a name="[353]"></a>neutronDeinit</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriver.c.o(.text.neutronDeinit))
<BR><BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Free(TfLiteContext*, void*)
</UL>

<P><STRONG><a name="[3f8]"></a>neutronFwInit</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.neutronFwInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronInit
</UL>

<P><STRONG><a name="[3f1]"></a>neutronFwInterpreter</STRONG> (Thumb, 842 bytes, Stack size unknown bytes, NeutronFirmware.c.o(.text.neutronFwInterpreter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = neutronFwInterpreter &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeutronMicroInstrPost
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeutronMicroInstrPre
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKernelArgSzWrapper
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallKernelWrapper
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutron_done
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validateArgsSz
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronRunBlocking
</UL>

<P><STRONG><a name="[354]"></a>neutronInit</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriver.c.o(.text.neutronInit))
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)
</UL>

<P><STRONG><a name="[359]"></a>neutronModelPrepare</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, NeutronDriver.c.o(.text.neutronModelPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = neutronModelPrepare &rArr; driverAlloc &rArr; memalign &rArr; posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronModelPrepare
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[352]"></a>neutronModelUnprepare</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, NeutronDriver.c.o(.text.neutronModelUnprepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = neutronModelUnprepare &rArr; driverFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverFree
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronModelUnprepare
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Free(TfLiteContext*, void*)
</UL>

<P><STRONG><a name="[348]"></a>neutronRunBlocking</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, NeutronDriver.c.o(.text.neutronRunBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = neutronRunBlocking &rArr; privateNeutronRunBlocking &rArr; neutronFwInterpreter &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronRunBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[347]"></a>neutronSetTrace</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriver.c.o(.text.neutronSetTrace))
<BR><BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;privateNeutronSetTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[2d9]"></a>neutron_done</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.neutron_done))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCpy
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slice
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
</UL>

<P><STRONG><a name="[2a8]"></a>neutron_exec</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.neutron_exec))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXEC
</UL>

<P><STRONG><a name="[3f0]"></a>privateNeutronDeinit</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriverPrivate.c.o(.text.privateNeutronDeinit))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronDeinit
</UL>

<P><STRONG><a name="[3f3]"></a>privateNeutronInit</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriverPrivate.c.o(.text.privateNeutronInit))
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronInit
</UL>

<P><STRONG><a name="[3f4]"></a>privateNeutronModelPrepare</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriverPrivate.c.o(.text.privateNeutronModelPrepare))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronModelPrepare
</UL>

<P><STRONG><a name="[3f5]"></a>privateNeutronModelUnprepare</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, NeutronDriverPrivate.c.o(.text.privateNeutronModelUnprepare))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronModelUnprepare
</UL>

<P><STRONG><a name="[3f6]"></a>privateNeutronRunBlocking</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, NeutronDriverPrivate.c.o(.text.privateNeutronRunBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = privateNeutronRunBlocking &rArr; neutronFwInterpreter &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeutronFirmwareTraceInit
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronRunBlocking
</UL>

<P><STRONG><a name="[3f7]"></a>privateNeutronSetTrace</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, NeutronDriverPrivate.c.o(.text.privateNeutronSetTrace))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronSetTrace
</UL>

<P><STRONG><a name="[2e1]"></a>relocateData</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, NeutronRuntime.c.o(.text.relocateData))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sequence
</UL>

<P><STRONG><a name="[3eb]"></a>scc8660_init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, zf_device_scc8660.o(.text.scc8660_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = scc8660_init &rArr; zf_debug_printf &rArr; LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ezh_start
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_set_config_sccb
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_debug_printf
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ed]"></a>scc8660_set_brightness</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zf_device_scc8660.o(.text.scc8660_set_brightness))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fc]"></a>scc8660_set_brightness_sccb</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, zf_device_config.o(.text.scc8660_set_brightness_sccb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_read_register
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_write_register
</UL>

<P><STRONG><a name="[3fb]"></a>scc8660_set_config_sccb</STRONG> (Thumb, 5844 bytes, Stack size 40 bytes, zf_device_config.o(.text.scc8660_set_config_sccb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = scc8660_set_config_sccb &rArr; soft_iic_sccb_read_register &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_read_register
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_write_register
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
</UL>

<P><STRONG><a name="[3fa]"></a>soft_iic_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = soft_iic_init &rArr; gpio_init &rArr; GPIO_PinInit &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
</UL>

<P><STRONG><a name="[3fe]"></a>soft_iic_sccb_read_register</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, zf_driver_soft_iic.o(.text.soft_iic_sccb_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = soft_iic_sccb_read_register &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_read_data
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_stop
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_set_config_sccb
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_set_brightness_sccb
</UL>

<P><STRONG><a name="[3fd]"></a>soft_iic_sccb_write_register</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, zf_driver_soft_iic.o(.text.soft_iic_sccb_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = soft_iic_sccb_write_register &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_stop
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_send_data
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_set_config_sccb
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_set_brightness_sccb
</UL>

<P><STRONG><a name="[403]"></a>system_delay_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, zf_driver_delay.o(.text.system_delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = system_delay_init &rArr; LPTMR_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_Deinit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_Init
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_GetDefaultConfig
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupClk16KClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_board_init
</UL>

<P><STRONG><a name="[2b0]"></a>system_delay_ms</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, zf_driver_delay.o(.text.system_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_set_config_sccb
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2db]"></a>traceEvent</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, NeutronFirmwareTrace.c.o(.text.traceEvent))
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTraceToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeutronMicroInstrPost
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NeutronMicroInstrPre
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutron_exec
</UL>

<P><STRONG><a name="[2d4]"></a>__cxa_guard_acquire</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_NEUTRON_GRAPH()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[2d6]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Register_NEUTRON_GRAPH()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOpsResolver()
</UL>

<P><STRONG><a name="[3ea]"></a>user_uart_init</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, zf_driver_uart.o(.text.user_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = user_uart_init &rArr; LPUART_Init &rArr; LP_FLEXCOMM_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetLPFlexCommClkFreq
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f2]"></a>validateArgsSz</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, NeutronFirmwarePrivate.c.o(.text.validateArgsSz))
<BR><BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxArgSz
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronFwInterpreter
</UL>

<P><STRONG><a name="[3e9]"></a>zf_board_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, zf_board_init.o(.text.zf_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = zf_board_init &rArr; debug_uart_init &rArr; LPUART_Init &rArr; LP_FLEXCOMM_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_PowerMode_OD
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f8]"></a>zf_debug_printf</STRONG> (Thumb, 534 bytes, Stack size 128 bytes, zf_board_init.o(.text.zf_debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = zf_debug_printf &rArr; LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_str
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ec]"></a>zf_model_init</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, zf_model_process.o(.text.zf_model_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = zf_model_init &rArr; zf_debug_printf &rArr; LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOutputTensor
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetAnchors
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOutputSize
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetOutputTensorData
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetInputTensorData
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_GetArenaUsedBytes
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_debug_printf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ef]"></a>zf_model_run</STRONG> (Thumb, 396 bytes, Stack size 96 bytes, zf_model_process.o(.text.zf_model_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = zf_model_run &rArr; zf_model_odresult_out(tagodresult_t const*, int) &rArr; ips200_show_int &rArr; ips200_show_char &rArr; ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_scc8660
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DetectorPostProcess(TfLiteTensor const**, std::__2::vector&lang;yolo::object_detection::DetectionResult, std::__2::allocator&lang;yolo::object_detection::DetectionResult&rang;&rang;&, yolo::object_detection::PostProcessParams const&)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEL_RunInference
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_rect_on_slice_buffer(unsigned short*, int, int, int, tagodresult_t*, int, int)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fe]"></a>zf_user_printf</STRONG> (Thumb, 384 bytes, Stack size 112 bytes, zf_driver_uart.o(.text.zf_user_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = zf_user_printf &rArr; LPUART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_str
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_str
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[254]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[40c]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[30b]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[49c]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[40d]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[2fa]"></a>__hardfp_pow</STRONG> (Thumb, 3088 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
</UL>

<P><STRONG><a name="[2fc]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
</UL>

<P><STRONG><a name="[418]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[411]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[410]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[416]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[413]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[417]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[40a]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[40b]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[409]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[247]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[32a]"></a>expf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, expf.o(i.expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = expf &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::InitializeLutForInt16(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, tflite::SoftmaxParams*)
</UL>

<P><STRONG><a name="[415]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[39b]"></a>floor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = floor &rArr; __hardfp_floor &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
</UL>

<P><STRONG><a name="[390]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
</UL>

<P><STRONG><a name="[391]"></a>round</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
</UL>

<P><STRONG><a name="[414]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[147]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[412]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[49d]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[49e]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[49f]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4a0]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4a1]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[329]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f_clz.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_user_printf
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_debug_printf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[41d]"></a>_d2f</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, d2f_clz.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[423]"></a>_dadd</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsub_zerodenorm
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daddsub_denorm
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[427]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __fpl_dcheck_NaN1 &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[42e]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[316]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv_clz.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[429]"></a>_ddiv</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, ddiv_clz.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm2
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4a2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[42d]"></a>_dcmpeq</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[2fd]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
</UL>

<P><STRONG><a name="[42f]"></a>_dfix</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2f9]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_odresult_out(tagodresult_t const*, int)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4a3]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[39a]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
</UL>

<P><STRONG><a name="[430]"></a>_ll_sto_d</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>

<P><STRONG><a name="[43e]"></a>__dflt_normalise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltn), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[407]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
</UL>

<P><STRONG><a name="[4a4]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[4a5]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[431]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[41c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[432]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[436]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul_clz.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizeEval(TfLiteContext*, TfLiteNode*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[433]"></a>_dmul</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, dmul_clz.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm2
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[420]"></a>__fpl_dnaninf</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[42b]"></a>__fpl_drenorm2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drenorm_clz.o(x$fpl$drenorm), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[43a]"></a>__fpl_drenorm1</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, drenorm_clz.o(x$fpl$drenorm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_drenorm1
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[42c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[40e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[435]"></a>_drcmple</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[41b]"></a>_drnd</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[40f]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[437]"></a>_drsb</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsub_uncommon_first
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[41a]"></a>_dsqrt</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, dsqrt_umaalclz.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm1
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[3b1]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[43b]"></a>_dsub</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dadd_zerodenorm
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[42a]"></a>__dunder</STRONG> (Thumb, 314 bytes, Stack size 4 bytes, dunder_clz.o(x$fpl$dunder))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[434]"></a>__dunder_d</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dunder_clz.o(x$fpl$dunder))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_drenorm1
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[41e]"></a>__fpl_exception</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, except.o(x$fpl$exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sto_d
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::DoPostProcess()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareQuantizeReference(TfLiteContext*, TfLiteNode*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PadPrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DequantizePrepare(TfLiteContext*, TfLiteNode*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PrepareAdd(TfLiteContext*, TfLiteNode*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)
</UL>

<P><STRONG><a name="[43d]"></a>_f2d</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[38f]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
</UL>

<P><STRONG><a name="[440]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[441]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[3a9]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*)
</UL>

<P><STRONG><a name="[442]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[4a6]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[443]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[3b2]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_model_run
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetQuantizedConvolutionMultipler(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, double*)
</UL>

<P><STRONG><a name="[444]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3b4]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplierSmallerThanOneExp(double, long*, int*)
</UL>

<P><STRONG><a name="[445]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[43f]"></a>__fpl_fnaninf</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder_d
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[20e]"></a>_fp_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[4a7]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4a8]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[41f]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[422]"></a>__funder</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, funder_clz.o(x$fpl$funder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[446]"></a>__funder_d</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, funder_clz.o(x$fpl$funder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trapveneer
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[251]"></a>__ieee_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[392]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
</UL>

<P><STRONG><a name="[447]"></a>_ll_sfrom_d</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
</UL>

<P><STRONG><a name="[448]"></a>_ll_ufrom_f</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
</UL>

<P><STRONG><a name="[4a9]"></a>__default_to_accurate_btod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1), UNUSED)

<P><STRONG><a name="[1f0]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[428]"></a>__fpl_return_NaN</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[419]"></a>__ARM_scalbn</STRONG> (Thumb, 268 bytes, Stack size 4 bytes, scalbn_clz.o(x$fpl$scalbn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __ARM_scalbn &rArr; __dunder &rArr; __fpl_exception &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[421]"></a>_fp_trapveneer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__funder_d
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_exception
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dunder_d
</UL>

<P><STRONG><a name="[449]"></a>__fpl_cmpreturn</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1e6]"></a>_GLOBAL__sub_I_zf_model_process.cpp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, zf_model_process.o(.text._GLOBAL__sub_I_zf_model_process.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_zf_model_process.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zf_model_process.o(.init_array)
</UL>
<P><STRONG><a name="[400]"></a>soft_iic_start</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = soft_iic_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_read_register
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_write_register
</UL>

<P><STRONG><a name="[401]"></a>soft_iic_send_data</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = soft_iic_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_read_register
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_write_register
</UL>

<P><STRONG><a name="[402]"></a>soft_iic_stop</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = soft_iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_read_register
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_write_register
</UL>

<P><STRONG><a name="[3ff]"></a>soft_iic_read_data</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, zf_driver_soft_iic.o(.text.soft_iic_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = soft_iic_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_iic_sccb_read_register
</UL>

<P><STRONG><a name="[3e3]"></a>ips200_set_region</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, zf_device_ips200.o(.text.ips200_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ips200_set_region &rArr; LPSPI_MasterTransferEDMA &rArr; LPSPI_MasterTransferEDMALite &rArr; EDMA_TcdSetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCD &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferEDMA
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_char
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_show_scc8660
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_draw_line
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200_init
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_GpioInterruptHandle</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, fsl_adapter_gpio.o(.text.HAL_GpioInterruptHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GpioInterruptHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioClearInterruptFlags
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioGetInterruptFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO51_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO50_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO41_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO40_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO31_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO30_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO21_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO20_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO11_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO10_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO01_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO00_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>EDMA_LpspiMasterCallback</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, fsl_lpspi_edma.o(.text.EDMA_LpspiMasterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EDMA_LpspiMasterCallback &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_Vprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_lpspi_edma.o(.text.LPSPI_MasterTransferEDMALite)
</UL>
<P><STRONG><a name="[310]"></a>std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&)</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, yolo_post_processing.o(.text._ZNSt3__212forward_listIN4yolo5image9DetectionENS_9allocatorIS3_EEE6__sortIZNS2_12CalculateNMSERS6_ifE3$_0EEPNS_19__forward_list_nodeIS3_PvEESD_iRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&) &rArr;  std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::image::CalculateNMS(std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&, int, float)::$_0&)
</UL>

<P><STRONG><a name="[30d]"></a>std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&)</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, yolo_post_processing.o(.text._ZNSt3__212forward_listIN4yolo5image9DetectionENS_9allocatorIS3_EEE6__sortIZNS1_19DetectorPostProcess15GetNetworkBoxesERNS1_16object_detection7NetworkEiifRS6_E3$_1EEPNS_19__forward_list_nodeIS3_PvEESH_iRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&) &rArr;  std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;* std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;::__sort&lang;yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&rang;(std::__2::__forward_list_node&lang;yolo::image::Detection, void*&rang;*, int, yolo::DetectorPostProcess::GetNetworkBoxes(yolo::object_detection::Network&, int, int, float, std::__2::forward_list&lang;yolo::image::Detection, std::__2::allocator&lang;yolo::image::Detection&rang;&rang;&)::$_1&)
</UL>

<P><STRONG><a name="[17a]"></a>tflite::(anonymous namespace)::Free(TfLiteContext*, void*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, neutron.o(.text._ZN6tflite12_GLOBAL__N_14FreeEP13TfLiteContextPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Free(TfLiteContext*, void*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronDeinit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronModelUnprepare
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
</UL>
<P><STRONG><a name="[17b]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, neutron.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronInit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
</UL>
<P><STRONG><a name="[17c]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, neutron.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronModelPrepare
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
</UL>
<P><STRONG><a name="[17d]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, neutron.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronRunBlocking
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neutronSetTrace
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> neutron.o(.text._ZN6tflite22Register_NEUTRON_GRAPHEv)
</UL>
<P><STRONG><a name="[183]"></a>ezh_camera_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zf_driver_ezh.o(.text.ezh_camera_callback))
<BR>[Address Reference Count : 1]<UL><LI> zf_driver_ezh.o(.text.ezh_start)
</UL>
<P><STRONG><a name="[188]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Allocate(unsigned int, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL>
<P><STRONG><a name="[189]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::Deallocate(void*)</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL>
<P><STRONG><a name="[18b]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL>
<P><STRONG><a name="[18a]"></a>tflite::(anonymous namespace)::MicroBuiltinDataAllocator::~MicroBuiltinDataAllocator()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, micro_allocator.o(.text._ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> micro_allocator.o(.rodata._ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE)
</UL>
<P><STRONG><a name="[37f]"></a>tflite::MicroInterpreter::inputs_size() const (.isra.0)</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::input(unsigned int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[380]"></a>tflite::MicroInterpreter::outputs_size() const (.isra.0)</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, micro_interpreter.o(.text._ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatbuffers::Vector&lang;long&rang; const* flatbuffers::Table::GetPointer&lang;flatbuffers::Vector&lang;long&rang; const*&rang;(unsigned short)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::Model::subgraphs() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::output(unsigned int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreter::AllocateTensors()
</UL>

<P><STRONG><a name="[2e7]"></a>(anonymous namespace)::VDebugLog(char const*, ...) (.constprop.0)</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, micro_log.o(.text._ZN12_GLOBAL__N_19VDebugLogEPKcz.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = (anonymous namespace)::VDebugLog(char const*, ...) (.constprop.0) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLog
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMicroPrintf(char const*, std::__va_list)
</UL>

<P><STRONG><a name="[31d]"></a>tflite::(anonymous namespace)::ConvertPadding(tflite::Padding)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParsePool(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseDepthwiseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
</UL>

<P><STRONG><a name="[320]"></a>tflite::(anonymous namespace)::SafeBuiltinDataAllocator::BuiltinDataDeleter::operator()(void*) (.isra.0)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, flatbuffer_conversions.o(.text._ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ParseConv2D(tflite::Operator const*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**)
</UL>

<P><STRONG><a name="[33a]"></a>void tflite::reference_integer_ops::BroadcastAddRecursiveDimensions&lang;signed char&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, signed char const*, signed char const*, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) (.isra.0)</STRONG> (Thumb, 434 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite21reference_integer_ops31BroadcastAddRecursiveDimensionsIaEEvRKNS_16ArithmeticParamsEiPjS5_S5_S5_S5_S5_PKT_S8_PS6_PFvS4_EPFS6_S6_S6_S4_E.isra.0))
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastAddRecursiveDimensions&lang;signed char&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, signed char const*, signed char const*, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) (.isra.0)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastAddRecursiveDimensions&lang;signed char&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, signed char const*, signed char const*, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) (.isra.0)
</UL>

<P><STRONG><a name="[336]"></a>tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</STRONG> (Thumb, 476 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalAddQuantizedInt8(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0) &rArr; tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*) &rArr; AbortImpl() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_elementwise_add_s8
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::ReduceDimensionsForBroadcast&lang;6&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, unsigned int*, unsigned int*, unsigned int*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::BroadcastAddRecursiveDimensions&lang;signed char&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, signed char const*, signed char const*, signed char*, void (*)(tflite::ArithmeticParams const&), signed char (*)(signed char, signed char, tflite::ArithmeticParams const&)) (.isra.0)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33b]"></a>tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</STRONG> (Thumb, 466 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalAddQuantizedInt16(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0) &rArr; tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*) &rArr; AbortImpl() &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_elementwise_add_s16
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;short&rang;(tflite::ArithmeticParams const&, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, short const*, short const*, short*)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::ReduceDimensionsForBroadcast&lang;6&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, unsigned int*, unsigned int*, unsigned int*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::reference_ops::ProcessBroadcastShapes(tflite::RuntimeShape const&, tflite::RuntimeShape const&, tflite::ArithmeticParams*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[355]"></a>tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</STRONG> (Thumb, 768 bytes, Stack size unknown bytes, add.o(.text._ZN6tflite12_GLOBAL__N_17EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalAdd(TfLiteContext*, TfLiteNode*, TfLiteAddParams*, tflite::(anonymous namespace)::OpData const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;long&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, long, long, long const*, long const*, long*)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::BroadcastAddRecursiveDimensions&lang;float&rang;(int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, float, float, float const*, float const*, float*)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool tflite::ReduceDimensionsForBroadcast&lang;6&rang;(tflite::RuntimeShape const&, tflite::RuntimeShape const&, unsigned int*, unsigned int*, unsigned int*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AbortImpl()
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::EvalAdd(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[179]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> concatenation.o(.text._ZN6tflite22Register_CONCATENATIONEv)
</UL>
<P><STRONG><a name="[178]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 624 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> concatenation.o(.text._ZN6tflite22Register_CONCATENATIONEv)
</UL>
<P><STRONG><a name="[332]"></a>void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_115EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32e]"></a>void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 386 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_115EvalUnquantizedIbEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32d]"></a>void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 386 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_115EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[331]"></a>void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_115EvalUnquantizedIsEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[330]"></a>void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_115EvalUnquantizedIlEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[32f]"></a>void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 392 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_115EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[177]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, concatenation.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;float&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;short&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;signed char&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;bool&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::(anonymous namespace)::EvalUnquantized&lang;long long&rang;(TfLiteContext*, TfLiteNode*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> concatenation.o(.text._ZN6tflite22Register_CONCATENATIONEv)
</UL>
<P><STRONG><a name="[16a]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> conv.o(.text._ZN6tflite16Register_CONV_2DEv)
</UL>
<P><STRONG><a name="[169]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 824 bytes, Stack size unknown bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16_get_buffer_size
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8_get_buffer_size
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataConv(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetTensorShape(TfLiteTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conv.o(.text._ZN6tflite16Register_CONV_2DEv)
</UL>
<P><STRONG><a name="[343]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0) &rArr; arm_convolve_wrapper_s16 &rArr; arm_convolve_fast_s16 &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s16
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[33f]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0) &rArr; arm_convolve_wrapper_s8 &rArr; arm_convolve_1_x_n_s8 &rArr; arm_convolve_s8 &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_wrapper_s8
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[34c]"></a>void tflite::reference_integer_ops::ConvPerChannel&lang;long&rang;(tflite::ConvParams const&, long const*, long const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long const*, tflite::RuntimeShape const&, short*) (.isra.0)</STRONG> (Thumb, 580 bytes, Stack size unknown bytes, conv.o(.text._ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps.isra.0))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MultiplyByQuantizedMultiplier(long, long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[168]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1204 bytes, Stack size unknown bytes, conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvParamsFloat(TfLiteConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::ConvParamsQuantized(TfLiteConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::MakeUnpackedInt4Tensor(TfLiteContext*, int, TfLiteEvalTensor const*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_integer_ops::ConvPerChannel&lang;long&rang;(tflite::ConvParams const&, long const*, long const*, tflite::RuntimeShape const&, short const*, tflite::RuntimeShape const&, signed char const*, tflite::RuntimeShape const&, long const*, tflite::RuntimeShape const&, short*) (.isra.0)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conv.o(.text._ZN6tflite16Register_CONV_2DEv)
</UL>
<P><STRONG><a name="[180]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
</UL>
<P><STRONG><a name="[17f]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 844 bytes, Stack size unknown bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*) &rArr; tflite::PopulateConvolutionQuantizationParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor const*, TfLiteTensor*, TfLiteFusedActivation const&, long*, int*, long*, long*, long*, long*, int) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8_get_buffer_size
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateOpDataDepthwiseConv(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, int, int, int, int, int, int, TfLiteType, tflite::OpDataConv*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetTensorShape(TfLiteTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
</UL>
<P><STRONG><a name="[345]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</STRONG> (Thumb, 234 bytes, Stack size unknown bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0) &rArr; tflite::micro::GetTensorShape(TfLiteEvalTensor const*) &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_s16
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[341]"></a>tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.constprop.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0) &rArr; arm_depthwise_conv_wrapper_s8 &rArr; arm_depthwise_conv_s8_opt &rArr; memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_depthwise_conv_wrapper_s8
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[17e]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 964 bytes, Stack size unknown bytes, depthwise_conv.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::DepthwiseConvParamsFloat(TfLiteDepthwiseConvParams const&, tflite::OpDataConv const&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::EvalQuantizedPerChannel16x8(TfLiteContext*, TfLiteNode*, TfLiteDepthwiseConvParams const&, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::MakeUnpackedInt4Tensor(TfLiteContext*, int, TfLiteEvalTensor const*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> depthwise_conv.o(.text._ZN6tflite26Register_DEPTHWISE_CONV_2DEv)
</UL>
<P><STRONG><a name="[15d]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.text._ZN6tflite12Register_PADEv)
</UL>
<P><STRONG><a name="[15b]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 408 bytes, Stack size unknown bytes, pad.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;short, short&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, short const*, short const*, tflite::RuntimeShape const&, short*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;signed char, signed char&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, signed char const*, signed char const*, tflite::RuntimeShape const&, signed char*)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;float, float&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, float const*, float const*, tflite::RuntimeShape const&, float*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tflite::reference_ops::PadImpl&lang;long, long&rang;(tflite::PadParams const&, tflite::RuntimeShape const&, long const*, long const*, tflite::RuntimeShape const&, long*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pad.o(.text._ZN6tflite12Register_PADEv)
</UL>
<P><STRONG><a name="[176]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
</UL>
<P><STRONG><a name="[175]"></a>tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_110MaxPrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::MaxPrepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PoolingPrepare(TfLiteContext*, TfLiteNode*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
</UL>
<P><STRONG><a name="[333]"></a>tflite::(anonymous namespace)::MaxEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0.isra.0)</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS0_6OpDataEPK16TfLiteEvalTensorPSC_.constprop.0.isra.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::MaxEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0.isra.0) &rArr; arm_max_pool_s8 &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_max_pool_s8
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_max_pool_s16
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)
</UL>

<P><STRONG><a name="[174]"></a>tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, pooling.o(.text._ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::MaxEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MaxPoolingEvalFloat(TfLiteContext*, TfLiteNode*, TfLitePoolParams*, tflite::OpDataPooling const*, TfLiteEvalTensor const*, TfLiteEvalTensor*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::(anonymous namespace)::MaxEvalQuantized(TfLiteContext*, TfLiteNode const*, TfLitePoolParams const*, tflite::(anonymous namespace)::OpData const&, TfLiteEvalTensor const*, TfLiteEvalTensor*) (.constprop.0.isra.0)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pooling.o(.text._ZN6tflite20Register_MAX_POOL_2DEv)
</UL>
<P><STRONG><a name="[170]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, quantize.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> quantize.o(.text._ZN6tflite17Register_QUANTIZEEv)
</UL>
<P><STRONG><a name="[182]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 384 bytes, Stack size unknown bytes, resize_nearest_neighbor.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resize_nearest_neighbor.o(.text._ZN6tflite32Register_RESIZE_NEAREST_NEIGHBOREv)
</UL>
<P><STRONG><a name="[181]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 1960 bytes, Stack size unknown bytes, resize_nearest_neighbor.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resize_nearest_neighbor.o(.text._ZN6tflite32Register_RESIZE_NEAREST_NEIGHBOREv)
</UL>
<P><STRONG><a name="[160]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, slice.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slice.o(.text._ZN6tflite14Register_SLICEEv)
</UL>
<P><STRONG><a name="[15f]"></a>tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 2244 bytes, Stack size unknown bytes, slice.o(.text._ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Eval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slice.o(.text._ZN6tflite14Register_SLICEEv)
</UL>
<P><STRONG><a name="[16d]"></a>tflite::(anonymous namespace)::Init(TfLiteContext*, char const*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, softmax.o(.text._ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj))
<BR>[Address Reference Count : 1]<UL><LI> softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
</UL>
<P><STRONG><a name="[16b]"></a>tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 464 bytes, Stack size unknown bytes, softmax.o(.text._ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::SoftmaxEval(TfLiteContext*, TfLiteNode*) &rArr; MicroPrintf(char const*, ...) &rArr; VMicroPrintf(char const*, std::__va_list) &rArr; DebugLog &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicroPrintf(char const*, ...)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s16
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s8_s16
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_softmax_s8
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalOutput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetEvalInput(TfLiteContext const*, TfLiteNode const*, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::micro::GetTensorShape(TfLiteEvalTensor const*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
</UL>
<P><STRONG><a name="[16c]"></a>tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*)</STRONG> (Thumb, 352 bytes, Stack size unknown bytes, softmax.o(.text._ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::Prepare(TfLiteContext*, TfLiteNode*) &rArr; tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) &rArr; tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0) &rArr; tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*) &rArr; tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempOutputTensor(TfLiteNode const*, int)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroContext::AllocateTempInputTensor(TfLiteNode const*, int)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::GetTensorShape(TfLiteTensor const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softmax.o(.text._ZN6tflite16Register_SOFTMAXEv)
</UL>
<P><STRONG><a name="[3a2]"></a>tflite::(anonymous namespace)::OpNameFromRegistration(TFLMRegistration const*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, micro_interpreter_graph.o(.text._ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::InvokeSubgraph(int)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::MicroInterpreterGraph::PrepareSubgraphs()
</UL>

<P><STRONG><a name="[3be]"></a>.LTHUNK3</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to tflite::SingleArenaBufferAllocator::GetPersistentUsedBytes() const
</UL>

<P><STRONG><a name="[3bd]"></a>.LTHUNK2</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, single_arena_buffer_allocator.o(.text._ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to tflite::SingleArenaBufferAllocator::AllocatePersistentBuffer(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[3b3]"></a>tflite::(anonymous namespace)::Quantize(TfLiteContext*, float, long, float, long&)</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, kernel_util.o(.text._ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateActivationRangeQuantized(TfLiteContext*, TfLiteFusedActivation, TfLiteTensor*, long*, long*)
</UL>

<P><STRONG><a name="[3a7]"></a>tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0)</STRONG> (Thumb, 804 bytes, Stack size unknown bytes, softmax_common.o(.text._ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE.part.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*) (.part.0) &rArr; tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*) &rArr; tflite::QuantizeMultiplierGreaterThanOne(double, long*, int*) &rArr; tflite::QuantizeMultiplier(double, long*, int*) &rArr; round &rArr; _drnd &rArr; __fpl_dnaninf &rArr; __dunder_d &rArr; _fp_trapveneer &rArr; _fp_trap &rArr; __rt_SIGFPE &rArr; __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateInputRadius(int, int, int)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::PreprocessSoftmaxScaling(double, double, int, long*, int*)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::QuantizeMultiplier(double, long*, int*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TfLiteTypeGetName
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
</UL>

<P><STRONG><a name="[33e]"></a>tflite::(anonymous namespace)::InitializeLutForInt16(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, tflite::SoftmaxParams*)</STRONG> (Thumb, 720 bytes, Stack size unknown bytes, softmax_common.o(.text._ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tflite::(anonymous namespace)::InitializeLutForInt16(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, tflite::SoftmaxParams*) &rArr; expf &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tflite::CalculateSoftmaxParams(TfLiteContext*, TfLiteTensor const*, TfLiteTensor*, TfLiteSoftmaxParams const*, tflite::SoftmaxParams*)
</UL>

<P><STRONG><a name="[438]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[43c]"></a>dadd_zerodenorm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[424]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[426]"></a>daddsub_denorm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[439]"></a>dsub_uncommon_first</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[425]"></a>dsub_zerodenorm</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[148]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[250]"></a>_fp_digits</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, _printf_fp_dec_accurate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = _fp_digits &rArr; _btod_main &rArr; _btod_common &rArr; _btod_pow &rArr; _btod_mul
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_main
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
